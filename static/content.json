[{"name":"Documentation","description":"this is the info page","path":"/docs","text":"","wordCount":0,"type":"TOC"},{"name":"Information","description":"about Echo Speaks","path":"/docs/information","text":" Echo Speaks\n\nAbout the Project\n\nEcho Speaks is a utilitarian smartapp and device handler that allows you to discover, select, and use the Amazon Alexa Devices directly in your Smart Home Environment.\nIt will give you the ability to wake your Alexa devices remotely to speak any text that you wish for almost any given scenario.\nGone are the days of using expensive speakers connected to your hub. The day that\nyou have all been waiting for has arrived.\n\n|  |  |\n|:----------|---------|\n|Category: | My Apps |\n|Author: | Anthony Santilli  |\n|Documentation: | Jason Headley and Anthony Santilli |\n\nSoftware (Current Release)\n\nThe code for the SmartThings SmartApp & Device is found on the GitHub site:\n\n| SmartApps: | Source Code URL: | Version |\n|:-----------------|------------------------|---------------|\n| Echo Speaks: |Parent App | v2.4.0 |\n| Echo Speaks DTH: |Device Handler | v2.4.0 |\n| Echo Speaks DTH: |Heroku Server | v2.2.1 |\n","wordCount":137,"type":"Content"},{"name":"Requirements","description":"what's needed to make this all work!","path":"/docs/appRequirements","text":"The following items will be required for successful installation and operation:\nSmartThings Platform\nSmartThings IDE Account access\nSmartThings account with active ST Hub (V1, V2, V3, or SmartThings WiFi Mesh)\nSmartThings Classic mobile app installed on your mobile device\nHubitat Platform\nHubitat Hub with Web Portal access\nOther Items\nDuring the setup process, you will be required to create a free HerokuApp account (Existing accounts will work as well)\nAmazon 2 Factor Authentication. - Not required (Unless it was enabled in the past), but it's HIGHLY recommended that you enable it for security.","wordCount":84,"type":"Content"},{"name":"Installation","description":"installation and configuration instructions","path":"/docs/installation","text":"","wordCount":0,"type":"TOC"},{"name":"Install Methods","description":"select an install method","path":"/docs/installation/appInstall","text":"","wordCount":0,"type":"TOC"},{"name":"Community Installer","description":"Automate the install","path":"/docs/installation/appInstall/autoInstall","text":"This is the simplest way to get Echo Speak Installed as well as other community apps\n\nStep 1:\nPlease visit here for instructions: SmartThings Community Installer)\n\nStep 2:\nContinue to SmartApp Configuration\n\nServer Configuration\n","wordCount":29,"type":"Content"},{"name":"IDE (GitHub) Install","description":"use IDE integration","path":"/docs/installation/appInstall/githubInstall","text":"Enabling the GitHub Integration in the IDE is by far the second easiest way to install and get the latest updates for Echo Speak and Echo Speaks devices.\n\nStep 1:\nIf you haven't enabled Git integration (one time configuration) under the IDE please visit here for instructions: IDE GitHub Integration Instructions\n\nNOTE: Git Integration is not currently available outside of US and UK\n\nOtherwise Move to Step 2.\n\nStep 2:\nFirst, click on the Settings button at the top of SmartThings IDE page (this will only appear after completing the one-time integration with GitHub)\n\nscreenshot\n\nStep 3:\n\nClick on Add new repository.\n\n  screenshot\n\nEnter the information below:\n\n  screenshot\n\n  | Owner  | Name   | Branch |\n  |:------------:|:-------------:|:------------:|\n  | tonesto7 | echo-speaks | master |\n\nStep 4:\n\nClick on Save to close the GitHub Repository Integration page.\n\nSmartApp Install\n\nStep 1:\n\nClick the My SmartApps button at the top of the IDE\n\n  screenshot\n\nClick the Update from Repo button at the upper-right corner of the IDE\n\n  screenshot\n\nClick on echo-speaks (master) from the drop down menu.\nOn the right-hand column labelled New (Only in Github), scroll down to click the app to install.\nThis will be:\n  echo-speaks.groovy\n\nCheck the Publish box and Click the Execute Update in the bottom-right corner of the screen.\nWhen it's completed syncing, the new app should now appear in the IDE. If they ever change color, that indicates a new version is available.\n\nStep 2:\nYou will now enable the SmartApps OAuth configuration. Please click on the App Settings button and scroll to the bottom of the next screen.\n\nscreenshot\n\nStep 3:\n> Click on the OAuth tab and then click the Enable OAuth in Smart App button as seen below:\n>\n>  screenshot\n\nStep 4:\nFinally, click on Update.\n\nscreenshot\n\nDevice Handler Install\n\nStep 1:\n\nClick the My Device Handlers button at the top of the IDE\n\n  screenshot\n\nClick the Update from Repo button at the upper-right corner of the IDE\n\n  screenshot\n\nClick on echo-speaks (master) from the drop down menu.\nOn the right-hand column labelled New (Only in Github), scroll down to click the app to install.\nThis will be:\n  echo-speaks-device.groovy\n\nCheck the Publish box and Click the Execute Update in the bottom-right corner of the screen.\nWhen it's completed syncing, the new device should now appear in the IDE. If they ever change color, that indicates a new version is available.\n\nStep 4:\nContinue SmartApp Configuration Here:\n\nSmartApp Configuration\n","wordCount":330,"type":"Content"},{"name":"Manual Install","description":"install the code manually","path":"/docs/installation/appInstall/manualInstall","text":"","wordCount":0,"type":"TOC"},{"name":"SmartApp Install","description":"smartapp install instructions","path":"/docs/installation/appInstall/manualInstall/smartappInstall","text":"Step 1:\nLog-in to the SmartThings IDE at ST IDE\n\nscreenshot\n\nOnce you login ensure you are able to see your hub and devices under the Locations tab.\nThese instruction assume that you have already registered an account on the SmartThings IDE website. Otherwise, please create the account before proceeding any further.\n\nStep 2:\nNavigate to the SmartApps Section of the SmartThings IDE by clicking My SmartApps tab at the top of your screen:\n\nscreenshot\n\nStep 3:\nCreate a new smartapp by clicking on the screenshot button found in the top right corner of this page:\n\nscreenshot\n\nStep 4:\nClick on the screenshot button found at the top of the screen:\n\nscreenshot\n\nStep 5:\nYou will now be at this page:\n\nscreenshot\n\nStep 6:\nCopy the Echo Speaks source code from this link: SmartApp Code\n\nPress CTRL+A to Select all text and CTRL+C to Copy the selected text.\nNow paste it into the large white box on your screen with CTRL+V.\nScroll to the bottom of the page and click on the Create button.\n\n  screenshot\n\nStep 7:\nYou will now see the screen below:\n\nscreenshot\n\nClick on the Save button.\nAfter a few seconds click on the Publish button, and then click the For Me button.\n\n  screenshot\n\nStep 8:\nYou will now enable the SmartApps OAuth configuration. Please click on the App Settings button and scroll to the bottom of the next screen.\n\nscreenshot\n\nStep 9:\nClick on the OAuth tab and then click the Enable OAuth in Smart App button as seen below:\n\nscreenshot\n\nStep 10:\nFinally, click on Update.\n\nscreenshot\n\nStep 11:\nContinue Device Handler Install Here:\n\nDevice Manual Install\n","wordCount":114,"type":"Content"},{"name":"Device Install","description":"device install instructions","path":"/docs/installation/appInstall/manualInstall/deviceInstall","text":"Step 1:\nLog into the IDE.\n\nClick on the My Device Handlers tab:\n\n  screenshot\n\nFollowed by the Create New Device Handler:\n\n  screenshot\n\nFinally the From Code tab:\n\n  screenshot\n\nStep 2:\nClick on this link: Device Handler Code to obtain the Device Handler code.\n\nPress CTRL+A to Select all text and CTRL+C to Copy the selected text.\nNow paste it into the large white box on your screen with CTRL+V.\nScroll to the bottom of the page and click on the Create button.\n\n  screenshot\n\nStep 3:\n\nScroll to the top of the screen and click the Save button.\n\n  screenshot\n\nClick on by the Publish button and then For Me.\n\n  screenshot\n\nStep 4:\nContinue SmartApp Configuration Here:\n\nSmartApp Configuration\n","wordCount":41,"type":"Content"},{"name":"Configuration","description":"configure the smartapp and server installation","path":"/docs/installation/configuration","text":"","wordCount":0,"type":"TOC"},{"name":"Smart App","description":"SmartApp setup","path":"/docs/installation/configuration/appConfig","text":"\nStep 1:\nOn your mobile device, open the SmartThings Classic App.\nTap on the Automation tab.\n\nscreenshot\n\nStep 2:\nScroll to the bottom of the screen and tap on + Add a SmartApp\n\nscreenshot\n\nStep 3:\nScroll to the bottom of the screen again and tap on + My Apps.\n\nscreenshot\n\nStep 4:\nScroll until you find Echo Speaks and tap on it to start the install process.\n\nscreenshot\n\nStep 5:\nYou will now be in the main screen of the Echo Speaks SmartApp.\n\nReview the available options and enable any items you wish to activate.\nTap on the Save/Done button in the top right corner of the screen to complete the initial app install.\n\n screenshot\n\nStep 6:\nThis will return you to the installed Apps page.\n\nTap on Echo Speaks to begin server deployment.\n\n screenshot\n\nStep 7:\nYou will be returned to the Server config page\n\nscreenshot\n\nContinue Server Config Here: Server Configuration\n","wordCount":62,"type":"Content"},{"name":"Heroku (Server)","description":"Heroku server setup","path":"/docs/installation/configuration/serverConfig","text":"Step 1:\nYou will be returned to the Server config page.\n\nVerify Amazon region settings are correct (pink box).\nThen tap on the Begin Heroku Setup shown in the green box below.\n\n  screenshot\n\nStep 2:\n\nA browser window should open that looks like the one below.\nHighlight and copy the information in the gray box for later use.\n\n  screenshot\n\nNow tap on the Deploy to Heroku button.\n\nscreenshot\n\nStep 3:\n\nYou will paste the information from the previous step into the box named App Name\n\nscreenshot\n\nSee the green box below.\nYour information is going to show that the app name is not available.\n\nscreenshot\n\nYOU MUST FOLLOW THE NEXT STEP EXACTLY AS WRITTEN\n\nStep 4:\n\n THIS MUST BE DONE PRECISELY.  FAILURE TO FOLLOW THIS STEP MAY RESULT IN YOUR APP NOT OPERATING PROPERLY\n\n Please tap on the app name you pasted to open your keyboard on your screen, and then tap the space bar.\n Now tap the back button to delete that space that you just typed in.\n You MUST remove the space.\n Once the space is removed it should now turn green as pictured below:\n\n   screenshot\n\nStep 5:\nScroll to the bottom of the screen and tap on the Deploy App button. You will now see the information below as the app is being deployed.\nThink of the below picture as a movie.... the words will change\n\nscreenshot\n\nStep 6:\nOnce the screen looks like the one below (It generally only takes a minute or two after starting the above).\n\nTap on the View button.\n\n  screenshot\n\nThat will open this page shown below.\n\n  screenshot\n\nStep 7:\nAt this point, you need to get your amazon login cookie:\n\nTap on the Go to Login Page button as shown below.\n\n  screenshot\n\nStep 8:\nInput your CORRECT login information for the Amazon account that your devices are registered with, then tap on 'Sign In'.\n\nscreenshot\n\nWhen the above part is done successfully, you will see the screen below.\n\nscreenshot\n\nStep 9:\nAt this point, close the browser window and go back into the SmartThings mobile app.\n\nOpen the Echo Speaks SmartApp and press Save then wait a couple of minutes.\nYour app needs to communicate with Amazon and this can sometimes take about 1 minute.\n\n So after waiting for about 1 minute you can open the Echo Speaks App and you should see the Installed Devices section populated.\n\n  screenshot\n\nStep 10:\nOnce you see your devices scroll down.\n\nTap on the Device Test Page.\n\n  screenshot\n\nTap on the Device Test Page\n\n  screenshot\n\nStep 11:\nSelect the devices to test and activate the Perform the Broadcast toggle.\n\nscreenshot\n\nThis will send a test text to speech command to selected devices.\nIf you hear the broadcast on your echo devices, then good.\nIf not, call Houston cause you have a problem.\n\nYou're Done!\nOnce you have completed these steps you are done.\nYou can now use the devices in any of your supported Hubitat/SmartThings automations.\n\nCongratulations!!\n","wordCount":121,"type":"Content"},{"name":"Updates","description":"updating your code and server.","path":"/docs/updates","text":"","wordCount":0,"type":"TOC"},{"name":"Server Update","description":"heroku server update instructions","path":"/docs/updates/serverUpdate","text":"Step 1:\nIn order to update your existing server it will actually need to be deleted from Heroku and reployed.\nThis process is very simple just follow the redeploy process to get started.\n\nServer Redeploy\n","wordCount":32,"type":"Content"},{"name":"SmartThings Updates","description":"smartthings code update instructions","path":"/docs/updates/codeUpdate","text":"","wordCount":0,"type":"TOC"},{"name":"SmartApp","description":"smartthings smart app code update instructions","path":"/docs/updates/codeUpdate/smartAppUpdate","text":"When you see the app listed and it's colored purple/red that means there may be a code update\n\nStep 1:\n\nClick the My SmartApps button at the top of the IDE\n\n  screenshot\n\nStep 2:\n\nClick the Update from Repo button at the upper-right corner of the IDE\n\n  screenshot\n\nStep 3:\n\nClick on echo-speaks (master) from the drop down menu.\n\n  screenshot\n\nIt you see the echo-speaks.groovy listed in either the left-hand column labeled Obsolete (updated in GitHub) or the middle column labeled Conflicted (updated locally and in GitHub), scroll down to click the app to update.\n\nStep 4:\n\nCheck the Publish box and Click the Execute Update in the bottom-right corner of the screen.\nWhen it's completed syncing, the updated app should now appear black in the IDE. If they ever change color again, that indicates a new version is available.\n\nYou're done!!!\n","wordCount":130,"type":"Content"},{"name":"Device Handler","description":"smartthings device handler code update instructions","path":"/docs/updates/codeUpdate/deviceHandlerUpdate","text":"When you see the app listed and it's colored purple/red that means there may be a code update\n\nStep 1:\n\nClick the My Device Handlers button at the top of the IDE\n\n  screenshot\n\nStep 2:\n\nClick the Update from Repo button at the upper-right corner of the IDE\n\n  screenshot\n\nStep 3:\n\nClick on echo-speaks (master) from the drop down menu.\nIt you see the echo-speaks-device.groovy listed in either the left-hand column labeled Obsolete (updated in GitHub) or the middle column labeled Conflicted (updated locally and in GitHub), scroll down to click the device to update.\n\n  screenshot\n\nCheck the Publish box and Click the Execute Update in the bottom-right corner of the screen.\nWhen it's completed syncing, the updated device should now appear black in the IDE. If they ever change color again, that indicates a new version is available.\n\nYou're done!!!\n","wordCount":130,"type":"Content"},{"name":"Devices","description":"models supported and their attributes, commands.","path":"/docs/devices","text":"","wordCount":0,"type":"TOC"},{"name":"Device Attributes","description":"All custom device attributes available and example values","path":"/docs/devices/deviceAttributes","text":"\nIn this section, this we review device attributes and some basic example values.\n\nlastUpdated: (String)\nDescription: Contains the date/time of the last device data refresh.\\\nOutput: Dec 3, 2018 - 12:47:43 PM\n\ndeviceStatus: (String)\nDescription: Contains the current player status.\\\nOutput: playingechospot_gen1\n\ndeviceType: (String)\nDescription: Contains the device type (model number) identifier used by amazon.\\\nOutput: A10A33FOX2NUBK\n\ndeviceStyle: (String)\nDescription: Contains the description from the developer for the current device.\\\nOutput: Echo Spot\n\ndeviceFamily: (String)\nDescription: Contains the device family identifier used by amazon.\\\nOutput: ROOK\n\ndoNotDisturb: (String)\nDescription: Contains the devices current Do not Disturb status.\\\nOutput: false\n\nfirmwareVer: (String)\nDescription: Contains the devices current firmware revision.\\\nOutput: 625533420\n\nonlineStatus: (String)\nDescription: Contains the devices current online status under amazon.\\\nOutput: online\n\nbtDeviceConnected: (String)\nDescription: Contains the current bluetooth device connected to the alexa device.\\\nOutput: JBL Pulse 2\n\nbtDevicesPaired: (String)\nDescription: Contains a list of currently paired (available) bluetooth devices to the alexa device.\\\nOutput: [AirPods, JBL Pulse 2]\n\ncurrentStation: (String)\nDescription: Contains a current music source.\\\nOutput: Holiday Favorites Station\n\ncurrentAlbum: (String)\nDescription: Contains a current audio album.\\\nOutput: Dean Martin\n\ntrackImage: (String)\nDescription: Contains the current track image url.\\\nOutput: https://m.media-amazon.com/images/I/71mwv+MFxSL.UL600.jpg\n\ntrackImageHtml: (String)\nDescription: Contains the current track image as an html object for dashboards.\\\nOutput: ``\n\nalarmVolume: (String)\nDescription: Current alarm/reminder alert volume.\\\nOutput: 47\n\nalexaWakeWord: (String)\nDescription: Contains the devices current wake word.\\\nOutput: ALEXA\n\nwakeWords: (Enum)\nDescription: Contains list of available alexa wake words.\\\nOutput: [\"ALEXA\",\"AMAZON\",\"ECHO\",\"COMPUTER\"]\n\nalexaNotifications: (JSON_Object)\nDescription: Contains list of current device notifications.\\\n\nOutput: []\n\nalexaPlaylists: (JSON_Object)\nDescription: Contains current playlist in use by the device.\\\nOutput:\n\n{\n   \"Home Audio\": [\n      {\n          \"title\": \"Home Audio\",\n          \"playlistId\": \"a1553cd7-f732-4f7e-ac3c-995b94860e57\",\n          \"entryList\": null,\n          \"version\": \"1\",\n          \"trackCount\": 0\n      }\n   ]\n}\n\nalexaMusicProviders: (JSON_Object)\nDescription: Contains list of supported music playback services available.\\\nOutput:\n\n[\n    CLOUDPLAYER: My Library,\n    AMAZON_MUSIC: Amazon Music,\n    APPLE_MUSIC: Apple Music,\n    IHEARTRADIO: iHeartRadio,\n    PANDORA: Pandora,\n    TUNEIN: TuneIn\n]\n\nvolumeSupported: (Boolean)\nDescription: Identifies if device supports volume control actions.\\\nOutput: true\n\nttsSupported: (Boolean)\nDescription: Identifies if device supports text to speech actions.\\\nOutput: true\n\nmusicSupported: (Boolean)\nDescription: Identifies if device supports music player control actions.\\\nOutput: true\n\nalarmSupported: (Boolean)\nDescription: Identifies if device supports alarm management control actions.\\\nOutput: true\n\nreminderSupported: (Boolean)\nDescription: Identifies if device supports reminder management control actions.\\\nOutput: true\n\nlastSpeakCmd: (String)\nDescription: Contains the text used by the last Speak() command. Useful for replaying the last message.\\\nOutput: The Front Door Lock is unlocked\n\nlastCmdSentDt: (String)\nDescription: Contains the date/time of the last speak command.\\\nOutput: Mon Dec 03 09:16:09 EST 2018\n\nwasLastSpokeToDevice: (Boolean)\nDescription: Used to identify if the device was the last device spoken to on your account.\\\nOutput: true\n\nlastSpokenToTime: (Timestamp)\nDescription: Contains the timestamp of the last command given to the alexa device.\\\nOutput: 1548456169854\n\nlastVoiceActivity: (String)\nDescription: Contains the voice command given to the alexa device.\\\nOutput: what time is it\n\nwifiNetwork: (String)\nDescription: Contains the devices current Wifi Network SSID.\\\nOutput: Echo Speaks Wifi\n","wordCount":369,"type":"Content"},{"name":"Device Commands","description":"All of the device commands that are available","path":"/docs/devices/deviceCommands","text":"","wordCount":0,"type":"TOC"},{"name":"Actions","description":"action command descriptions","path":"/docs/devices/deviceCommands/actionCommands","text":"doNotDisturbOn()\n\nDescription:\nActivates Do Not Disturb for the device\n\nRequired Parameters\nNone Accepted\n\ndoNotDisturbOff()\n\nDescription:\nDisables Do Not Disturb for the device\n\nRequired Parameters\nNone Accepted\n\nstoreCurrentVolume()\n\nDescription:\nNOTICE:This is not always accurate.  We can not aquire volume unless media is playing or change the volume using SmartThings once\nCaptures current device volume\n\nRequired Parameters\nNone Accepted\n\nrestoreLastVolume()\n\nDescription:\nRestores volume to captured volume using storeCurrentVolume()\n\nRequired Parameters\nNone Accepted\n\nsetAlarmVolume(value)\n\nDescription:\nNOTE:Only available on device that support alarms and reminders\nSets the Echo Devices Alarm and Reminder Notification volume\n\nRequired Parameters\nVolume (Integer): Between 0-100\n\nExample: setAlarmVolume(40)\n\nstopAllDevices()\n\nDescription:\nNOTICE:Only send this command to a single device and not all devices\nStops audio playback on all echo devices\n\nParameters\nNone Accepted\n\nExample Usage: stopAllDevices()\n\nsetWakeWord(\"ECHO\")\n\nDescription:\nUsed to change the alexa wake word invocation name\n\nRequired Parameters\nWakeWord (String): You can use one of the following: [\"ALEXA\", \"AMAZON\", \"ECHO\", \"COMPUTER\"]\n\nExample Usage: setWakeWord(\"ECHO\")\n\nrenameDevice(\"New Device Name\")\n\nDescription:\nChanges the alexa device name under your amazon account\n\nRequired Parameters\nDevice Name (String):\nExample Usage: renameDevice(\"New Device Name\")\n\ngetDeviceActivity()\n\nDescription:\nUpdates the activity data for the attributes \"wasLastSpokenToDevice\" and \"lastVoiceActivity\"\n\nParameters\nNone Accepted\n\nExample Usage: getDeviceActivity()\n\ngetBluetoothDevices()\n\nDescription:\nRefreshes all bluetooth devices for the alexa device\n\nParameters\nNone Accepted\n\nExample Usage: getBluetoothDevices()\n\nconnectBluetooth(\"JBL Pulse 2\")\n\nDescription:\nWill connected a paired bluetooth device by name. (Look at attribute btDevicesPaired for a list of paired device names\n\nRequired Parameters\nDevice Name (String): Look at attribute btDevicesPaired for a list of paired device names\n\nExample Usage: connectBluetooth(\"JBL Pulse 2\")\n\ndisconnectBluetooth()\n\nDescription:\nWill disconnect the the currently connected bluetooth device\n\nParameters\nNone Accepted\n\nExample Usage: disconnectBluetooth()\n\nremoveBluetooth(\"JBL Pulse 2\")\n\nDescription:\nRemoves bluetooth device pairing from alexa device by name. (Look at attribute btDevicesPaired for a list of paired device names\n\nRequired Parameters\nDevice Name (String): Look at attribute btDevicesPaired for a list of paired device names\n\nExample Usage: removeBluetooth(\"JBL Pulse 2\")\n\nexecuteSequenceCommand(sequenceString)\n\nDescription:\nAllows you to pass a string of sequences to Amazon as a single command that will be executed one at a time\n\nRequired Parameters\nSequence String (String):\n\nweather\ntraffic\nflashbriefing\ngoodmorning\ngoodnight\ncleanup\nsingasong\ntellstory\nfunfact\njoke\nplaysearch\ncalendartoday\ncalendartomorrow\ncalendarnext\nstop\nstopalldevices\ncannedtts_random::(accepted values below)\n    goodbye\n    confirmations\n    goodmorning\n    compliments\n    birthday\n    goodnight\n    iamhome\n\nwait::value (seconds)\nvolume::value (0-100)\nspeak::message\nannouncement::message\nannouncementall::message\npushnotification::message\namazonmusic::search term\napplemusic::search term\niheartradio::search term\npandora::search term\nspotify::search term\ntunein::search term\ncloudplayer::search term\n\nEnter the command in a format exactly like this:\n\nvolume::40,, speak::this is so silly,, wait::60, weather,, cannedtts_random::goodbye,, traffic,, amazonmusic::green day,, volume::30\n\nEach command::value pair needs to be separated by a double comma ,, and the separator between the command and value must be command::value.\n\nExample Usage: executeSequenceCommand(\"volume::50,, speak::This is pretty cool,, volume::30\")\n","wordCount":320,"type":"Content"},{"name":"Alarm & Reminders","description":"alert command descriptions","path":"/docs/devices/deviceCommands/alertsCommands","text":"createAlarm(Label, Date, Time)\n\nDescription:\nNOTICE:Not all alexa devices support this feature\nThis will create audible alarms for a specific device.\n\nRequired Parameters\nLabel (String): Label to identify the alarm in the Alexa App\nDate (String): This must be in this format (Year-Month-Day)\nTime (String): This must be in this 24-hour time format (HH:MM)\n\nExample: createAlarm(\"Alarm Label\", \"2019-01-03\", \"18:10\")\n\ncreateReminder(Message, Date, Time)\n\nDescription:\nNOTICE:Not all alexa devices support this feature\nThis will create audible Reminder and read back the label as the reminder message.\n\nRequired Parameters\nReminder (String): Reminder message that is spoken back\nDate (String): This must be in this format (Year-Month-Day)\nTime (String): This must be in this 24-hour time format (HH:MM)\n\nExample: createReminder(\"Take out the trash\", \"2019-01-03\", \"18:10\")\n\nsendAlexaAppNotification(message)\n\nDescription:\nSends a push notification via the Alexa Mobile app.\n\nRequired Parameters\nMessage (String): String between 1-400 characters in length\n\nExample Usage: sendAlexaAppNotification(\"I have something important to alert you about\")\n","wordCount":81,"type":"Content"},{"name":"Music","description":"music command descriptions","path":"/docs/devices/deviceCommands/musicCommands","text":"togglePlayback()\n\nDescription:\nNOTICE:Not available on all devices. Only works on devices that support music playback control\nUsed to toggle between playing and stopped state\n\nExample: togglePlayback()\n\nsearchMusic(searchPhrase, providerId)\n\nDescription:\nNOTICE:Not available on all devices. Only works on devices that support music playback control\nUsed to play music from the desired music provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\nProviderId (String): ProviderId's allowed [CLOUDPLAYER, AMAZONMUSIC, APPLEMUSIC, IHEARTRADIO, PANDORA, SPOTIFY, TUNEIN]\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchMusic(\"thriller\", \"AMAZON_MUSIC\")\nOptional: searchMusic(\"thriller on the upstairs\", \"AMAZON_MUSIC\", 40, 300)\n\nInfo: I have discovered that when trying to play songs I had to add the word song to the search phrase.\n\nsearchAmazonMusic(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices. Only works on devices that support music playback control\nUsed to play music from Amazon Music provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchAmazonMusic(\"thriller\")\nOptional: searchAmazonMusic(\"thriller on the upstairs\", 40, 300)\n\nInfo: I have discovered that when trying to play songs I had to add the word song to the search phrase.\n\nsearchAppleMusic(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices. Only works on devices that support music playback control and Apple Music\nUsed to play music from Apple Music provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchAppleMusic(\"thriller\")\nOptional: searchAppleMusic(\"thriller on the upstairs\", 40, 300)\n\nInfo: I have discovered that when trying to play songs I had to add the word song to the search phrase.\n\nsearchPandora(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices. Requires connection of Pandora skills\nUsed to play music from Pandora Radio provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchPandora(\"thriller\")\nOptional: searchPandora(\"thriller on the upstairs\", 40, 300)\n\nsearchIheart(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices. Requires connection of iHeart Radio Skill\nUsed to play music from iHeartRadio provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchIheart(\"thriller\")\nOptional: searchIheart(\"thriller on the upstairs\", 40, 300)\n\nsearchSiriusXm(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices.  Requires Sirius XM subscription.\nUsed to play music from Sirius XM provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchSiriusXm(\"thriller\")\nOptional: searchSiriusXm(\"thriller on the upstairs\", 40, 300)\n\nsearchSpotify(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices. Requires Spotify subscription.\nUsed to play music from Spotify provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchSpotify(\"thriller\")\nOptional: searchSpotify(\"thriller on the upstairs\", 40, 300)\n\nInfo: I have discovered that when trying to play songs I had to add the word song to the search phrase.\n\nsearchTuneIn(searchPhrase)\n\nDescription:\nNOTICE:Not available on all devices. Only works on devices that support music playback control and Tune-In Radio\nUsed to play music from Tune-In Radio provider\n\nRequired Parameters\nSearchPhrase (String): String between 0-100 characters in length.  This can be song name, playlist, artist.You can also add an audio group in the search to have it played under a group of alexa devices.\n\nOptional Parameters\nVolume (Integer): Between 0-100\nsleepSeconds (Integer): Number of seconds to play the music (Sleep timer)\n\nExample: searchTuneIn(\"thriller\")\nOptional: searchTuneIn(\"thriller on the upstairs\", 40, 300)\n\nTesting\n\nI've recently added a Music Search Test section to the main page of the SmartThings/Hubitat app.\n","wordCount":683,"type":"Content"},{"name":"Speech","description":"speech command descriptions","path":"/docs/devices/deviceCommands/speechCommands","text":"replayText()\n\nDescription:\nWill replay the last text sent to the device.\n\nRequired Parameters\nNone Accepted\n\nsetVolumeAndSpeak(volume, message)\n\nDescription:\nNOTICE:This command is highly recommend in place of sending an individual command for both volume and speaking.\nWhen used it is set to Amazon as a single command and executed in a sequence.\n\nSends volume command first, then plays message.\n\nRequired Parameters\nVolume (Integer): Between 0-100\nMessage (String): String between 1-400 characters in length\n\nExample Usage: setVolumeAndSpeak(47, \"The Front door is unlocked\")\n\nsetVolumeSpeakAndRestore(volume, message)\n\nDescription:\nNOTICE:This command is highly recommended in place of sending individual commands for setVolume(47), speak(\"The Front door is unlocked\"), and setVolume(30).\nWhen used it is set to Amazon as a single command and executed in a sequence\nWhen the command is called it captures the current volume and restores immediately after the message is played.\n\nSends volume command first, then plays message, and restores original volume\n\nRequired Parameters\nVolume (Integer): Between 0-100\nMessage (String): String between 1-400 characters in length\nRestore Volume (Integer): Between 0-100\n\nExample Usage: setVolumeSpeakAndRestore(50, \"The Front door is unlocked\", 30)\n\nplayWeather()\n\nDescription:\nAlexa will give the current weather conditions\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playWeather()\nOptional: playWeather(30, 50)\n\nplaySingASong()\n\nDescription:\nAlexa will sing a random song\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playSingASong()\nOptional: playSingASong(30, 50)\n\nplayFlashBrief()\n\nDescription:\nAlexa will play the your flash briefing (If device supports it)\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playFlashBrief()\nOptional: playFlashBrief(30, 50)\n\nsayBirthday()\n\nDescription:\nAlexa will say a random happy birthday message\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: sayBirthday()\nOptional: sayBirthday(30, 50)\n\nsayCompliment()\n\nDescription:\nAlexa will say a random compliment message\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: sayCompliment()\nOptional: sayCompliment(30, 50)\n\nsayGoodbye()\n\nDescription:\nAlexa will say a random goodbye message\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: sayGoodbye()\nOptional: sayGoodbye(30, 50)\n\nsayGoodMorning()\n\nDescription:\nAlexa will play the your good morning run down\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: sayGoodMorning()\nOptional: sayGoodMorning(30, 50)\n\nsayGoodNight()\n\nDescription:\nAlexa will say a random good night message\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: sayGoodNight()\nOptional: sayGoodNight(30, 50)\n\nsayWelcomeHome()\n\nDescription:\nAlexa will say a random welcome home message\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: sayWelcomeHome()\nOptional: sayWelcomeHome(30, 50)\n\nplayTraffic()\n\nDescription:\nAlexa will give the current traffic condition on your way to work\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playTraffic()\nOptional: playTraffic(30, 50)\n\nplayTellStory()\n\nDescription:\nAlexa will tell a random story\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playTellStory()\nOptional: playTellStory(30, 50)\n\nplayFunFact()\n\nDescription:\nAlexa will tell a random fun fact\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playFunFact()\nOptional: playFunFact(30, 50)\n\nplayJoke()\n\nDescription:\nAlexa will tell a random joke\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playJoke()\nOptional: playJoke(30, 50)\n\nplayCalendarToday()\n\nDescription:\nNOTE:Only available when you connected calendar accounts to your amazon alexa account\nAlexa will read all of the calendar events for the day\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playCalendarToday()\nOptional: playCalendarToday(30, 50)\n\nplayCalendarTomorrow()\n\nDescription:\nNOTE:Only available when you connected calendar accounts to your amazon alexa account\nAlexa will read all of the calendar events for tomorrow\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playCalendarTomorrow()\nOptional: playCalendarTomorrow(30, 50)\n\nplayCalendarNext()\n\nDescription:\nNOTE:Only available when you connected calendar accounts to your amazon alexa account\nAlexa will read the next calendar event\n\nOptional Parameters\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playCalendarNext()\nOptional: playCalendarNext(30, 50)\n\nplayAnnouncement(message)\n\nDescription:\nThis will make an announcement with the message on the device executing the command\n\nRequired Parameters\nMessage (String): String between 1-400 characters in length\n\nOptional Parameters\nTitle (String): String between 1-40 characters in length (For Echo Show/Spot Display)\nVolume (Integer): Between 0-100\nRestore Volume (Integer): Between 0-100\n\nExample: playAnnouncement(\"the garage door has opened\")\n\nplayAnnouncementAll(message)\n\nDescription:\nThis will make an announcement with the message on all echo devices on your account\n\nRequired Parameters\nMessage (String): String between 1-400 characters in length\nTitle (String): String between 1-40 characters in length (For Echo Show/Spot Display)\n\nOptional Parameters\nTitle(String): String between 1-400 characters in length (For Echo Show/Spots Display)\n\nExample: playAnnouncementAll(\"the garage door has opened\")\n","wordCount":467,"type":"Content"},{"name":"Supported Devices","description":"Confirm devices supported","path":"/docs/devices/devicesSupported","text":"Devices tested to work with Echo Speaks TTS\n\n| Official Amazon Devices |\n|:-------------------------------------|\n| Echo Show (Gen 1, 2)                 |\n| Echo Dot (Gen 1, 2, 3)               |\n| Echo (Gen 1, 2)                      |\n| Echo Plus (Gen 1, 2)                 |\n| Echo Spot                            |\n| Echo Input                            |\n| Echo Tap                             |\n| Fire TV (Gen 1, 2, 3) (Need more Data)                |\n| Fire TV Stick (Gen 1, 2, 3) (Need more Data)          |\n| Fire TV Cube                         |\n| Kindle Fire Tablets (HD Fire Models) (Need more Data)  |\n\n| Other Devices with Alexa |\n|:------------------------------|\n| Ecobee 4                      |\n| One-Link Safe and Sound       |\n| Alexa App for Windows 10      |\n\nNotice\n  There are a lot of devices out there that have Alexa integrated which may or may not display in the Echo Speaks app.\n  We are attempting to make a way to better identify supported devices.\n  In the mean time I will update this list as often as I can.\n\nWas your Alexa Device Incorrectly Identified?\n\n Please create a new issue here: https://github.com/tonesto7/echo-speaks/issues\n   > Provide the following info in the issue:\n   >* DeviceType id (eg. A38949IHXHRQ5P)\n   >* Model Name Description\n   >* Generation of the device\n","wordCount":132,"type":"Content"},{"name":"Support","description":"troubleshooting and reporting issues","path":"/docs/support","text":"","wordCount":0,"type":"TOC"},{"name":"Common Errors","description":"solutions to common issues","path":"/docs/support/commonErrors","text":"**There will be times when you may receive an error message!\nHopefully you will find a fix from one of the items below!**\n\nStatus Code 400/401\n\nThis failure is almost always due to the expiration of your cookie.  Simply clear the log in information for the Heroku App and log back in to Amazon. This should fix your issue right away.\n\nSteps to Fix\n\nStep 1:\nLog into the https://dashboard.heroku.com website and click on your echo-speaks-xxxxxxx app.\n\nStep 2:\nThen click on the Settings.\n\nStep 3:\nScroll down to the Domains and Certificates section (pictured below).\n\nStep 4:\nClick on the link listed next to Domain.\n\nscreenshot\n\nThis will take you to the Amazon Cookie Retrieval page which looks similar to the picture below.\nIf it shows 'Authentication Good` then you should then be good to go.\n\nIf you are directed to log in again, then just do it and you should then be good.\n\nscreenshot\n\nStatus Code 404 (DEPRECATED)\n\nFailed with status code 404 @line 890 (asyncCommandHandler)\n\n  The Heroku service will put an app to sleep once it detects no activity for 30 minutes.\nThe Echo Speaks system has a \"Heart Beat\" that talks to Heroku to keep the app awake. We are dealing with the cloud here, so sometimes there may be a delay in the Heart Beat, resulting in a nap for your server.\n\nSteps to Fix\n\nStep 1:\nTo remedy this it is helpful to open the Web Config page. Which normally wakes the service up.  Sometimes this may take a couple of minutes.\nStep 2:\nYou can easily navigate to this page by following these steps. We recommend that you create a link to the page in case of any future incidents, then it will be a simple one click fix.\n\nStep 3:\nLog into the Heroku.com website and click on your app. Then click on Settings and scroll down to the Domains and Certificates section (pictured below).\nStep 4:\nClick on the link listed next to Domain.\n\nscreenshot\n\nThis will take you to the Amazon Cookie Retrieval page which looks similar to the picture below.\nIf it shows 'Authentication Good` then you should then be good to go.\n\nIf you are directed to log in again, then just do it and you should then be good.\n\nscreenshot\n\n/ap/cvf Request Error\n\nIf you see this error when you are attempting to do the Amazon Login part of the server deployment, We have found this to be due to having had the Amazon 2FA (2 Step Verfication) service activated, and then later turned off.\nUnfortunately, once you have had this service turned on, it will have to be on for Echo Speaks to work properly. You may or may not remember ever having it turned on in the past, but with the presence of this error, it is very possible. To remedy this error you will need to turn the 2FA service back on and redeploy the server.\n\nDidn't See your Issue here?:\nYou can view open issues or create a new one by following this guide:\n\nReporting Issues\n","wordCount":100,"type":"Content"},{"name":"Remove Server","description":"heroku server removal","path":"/docs/support/removeServer","text":"\nThere may come a time when you need to reset your Heroku server service.  Follow these steps precisely to do it.\n\nStep 1:\nLogon to the dashboard.heroku.com site.\nYou should see this screen that lists your Echo Speaks App, click on the app.\n\nscreenshot\n\nStep 2:\nClick on the Settings button like you see in the green box below:\n\nscreenshot\n\nStep 3:\nScroll to the very bottom of the page and click on Delete App\n\nscreenshot\n\nStep 4:\nCopy and paste the name of the app into the block and click on Delete App. Now close this screen and go back to your mobile app.\n\nscreenshot\n\nStep 5:\nOpen the Echo Speaks SmartApp and click on the Login Service Settings.\n\nscreenshot\n\nStep 6:\nAt the bottom, you will see the Reset Options tap to expand the section.\n\nOnce expanded Toggle the Reset Service Data\n\n  screenshot\n\nIf the page doesn't refresh to look like below then go back one page and return.\n\n  screenshot\n\nStep 7:\nNow that you have deleted the Echo Speaks server and reset the service data from the app the removal process is complete.\n","wordCount":48,"type":"Content"},{"name":"Redeploy Server","description":"redeploy heroku server","path":"/docs/support/redeployServer","text":"\n**Redeploying the Echo Speaks server is a very simple process. Just follow these steps.\nFYI it will take you longer to read these instruction than to actually redeploy the server!**\n\nStep 1:\nLogon to the dashboard.heroku.com site. You should see this screen that lists your Echo Speaks App, click on the app.\n  screenshot\n\nStep 2:\nClick on the Settings button like you see in the green box below:\nscreenshot\n\nStep 3:\nScroll to the very bottom of the page and click on Delete App\nscreenshot\n\nStep 4:\nCopy and paste the name of the app into the block and click on Delete. Now close this screen and go back to your mobile app.\nscreenshot\n\nStep 5:\nOpen the Echo Speaks SmartApp and click on the Login Service Settings.\n\nscreenshot\n\nStep 6:\nAt the bottom, you will see the Reset Options tap to expand the section.\n\nOnce expanded Toggle the Reset Service Data\n\n  screenshot\n\nIf the page doesn't refresh to look like below then go back one page and return.\n\n  screenshot\n\nStep 7:\nNow that you have deleted the Echo Speaks server and reset the service data from the app, follow this link below to redeploy your service.\n\nServer Configuration\n","wordCount":48,"type":"Content"},{"name":"Reporting Issues","description":"reporting issues after troubleshooting","path":"/docs/support/reportIssues","text":"Please check the common errors section before opening a new issue.\n\nYou can submit or review existing issues here: https://github.com/tonesto7/echo-speaks/issues\nPlease provide as much details as possible.\n  Logs/Screenshots would be great\n\nView Project Issues and Priorities: Issue Board\n","wordCount":32,"type":"Content"},{"name":"FAQs","description":"frequently asked questions are covered here","path":"/docs/faq","text":"This page contains Frequently asked questions and will be updated from time to time.\nCheck back often!\n\nQuick Links\n\nWhat if I have more than one Amazon Account?\n\nWhat if I have more than one Amazon Account?\n\n  If you have multiple Amazon accounts with devices on each one, maybe the one in your home and the one in your parents home, you can simply perform a second complete install of the app and Heroku server. This will allow you to find all of your devices and they can be used in your SmartThings automations.\n\nWhy doesn't playText() command work in other apps?\n\nthe playText() command found on devices with the \"Media Player\" capabily usually is looking for a url to the mp3 generated for the text message.\nThe issue is that Amazon doesn't allow mp3 playback on the echo's with out a custom skill.\n","wordCount":83,"type":"Content"},{"name":"Donate","description":"want to donate for all of the work involved","path":"/docs/donate","text":"The development of these integrations takes a lot of time and effort and while donations will never be required they are always very much appreciated.\nPayPal Link","wordCount":26,"type":"Content"},{"name":"What's New!","description":"recent announcements, changes, news, latest and greatest","path":"/docs/whatsNew","text":"New Items will eventually be added here.... TBD\n","wordCount":8,"type":"Content"}]