{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Echo Speaks About the Project # Echo Speaks is a utilitarian smartapp and device handler that allows you to discover, select, and use the Amazon Alexa Devices directly in your Smart Home Environment. It will give you the ability to wake your Alexa devices remotely to speak any text that you wish for almost any given scenario. Gone are the days of using expensive speakers connected to your hub. The day that you have all been waiting for has arrived. Author: Anthony Santilli Documentation: Jason Headley and Anthony Santilli Software (Current Release) # The SmartThings | Hubitat Apps/SmartApps & Device code is found on the GitHub site: Apps/SmartApps: Source Code URL: Version Echo Speaks: Parent App v3.2.1.0 Echo Speaks Actions: Child App v3.2.1.0 Echo Speaks Zones: Child App v3.2.1.0 Devices: Source Code URL: Version Echo Speaks Driver (SmartThings Only): Device Driver v3.2.1.0 Echo Speaks Driver (Hubitat Only): Device Driver v3.2.1.0 Echo Speaks Websocket (Hubitat Only): Device Driver v3.2.0.1 Server: Source Code URL: Version Echo Speaks Server: Heroku Server v2.3.0 Getting Started # The following items will be required for successful installation on each of the 2 platforms below: SmartThings Platform Requirements: SmartThings IDE Account access SmartThings account with active ST Hub (V1, V2, V3, or SmartThings WiFi Mesh) SmartThings Classic mobile app installed on your mobile device Code Install: SmartThings Code Install Hubitat Platform Requirements: Hubitat Hub with Web Portal access Code Install: Hubitat Code Install Other Items During the setup process, you will be required to create a free HerokuApp account (Existing accounts will work as well) Amazon 2 Factor Authentication. - Not required (Unless it was enabled in the past), but it\u2019s HIGHLY recommended that you enable it for security. Recent Changes # New Items will eventually be added here.... TBD","title":"Echo Speaks Documentation"},{"location":"#about_the_project","text":"","title":"About the Project"},{"location":"#software_current_release","text":"","title":"Software (Current Release)"},{"location":"#getting_started","text":"","title":"Getting Started"},{"location":"#recent_changes","text":"","title":"Recent Changes"},{"location":"donations/","text":"Donation Links # The development of these integrations takes a lot of time and effort and while donations will never be required they are always very much appreciated. PayPal Link","title":"Donate"},{"location":"donations/#donation_links","text":"","title":"Donation Links"},{"location":"faq/","text":"This page contains Frequently asked questions and will be updated from time to time. Check back often! Quick Links # What if I have more than one Amazon Account? What if I have more than one Amazon Account? # If you have multiple Amazon accounts with devices on each one, maybe the one in your home and the one in your parents home, you can simply perform a second complete install of the app and Heroku server. This will allow you to find all of your devices and they can be used in your SmartThings automations. Why doesn\u2019t playText() command work in other apps? # the playText() command found on devices with the \u201cMedia Player\u201d capabily usually is looking for a url to the mp3 generated for the text message. The issue is that Amazon doesn\u2019t allow mp3 playback on the echo\u2019s with out a custom skill.","title":"F.A.Q."},{"location":"faq/#quick_links","text":"What if I have more than one Amazon Account?","title":"Quick Links"},{"location":"faq/#what_if_i_have_more_than_one_amazon_account","text":"","title":"What if I have more than one Amazon Account?"},{"location":"faq/#why_doesnt_playtext_command_work_in_other_apps","text":"","title":"Why doesn't playText() command work in other apps?"},{"location":"links/","text":"Links # TBD","title":"Links"},{"location":"links/#links","text":"TBD","title":"Links"},{"location":"actions/actions_desc/","text":"Echo Speaks Actions: # This new child app will allow you to create rules based on device, location, schedule trigger events while defining conditions to utilize the full features of the Echo Speaks devices Without requiring a 3rd party app like WebCore.. The idea behind Actions was to create a simple but powerful app to trigger speech/announcements or other Echo Speaks features. The beauty is in the flexibility of each action, it can be as simple as a single speech event when the front door is unlocked. To as complex as selecting multiple triggers (contacts, motion, presence, etc.) and defining criteria and custom responses for each individual event type. Current Triggers Available: # Date/Time Events: Scheduled Time Sunrise/Sunset Location Events: Modes Routines Scenes (Hubitat) Safety & Security Events: Alarm (HSM/SHM) Fire/Smoke Carbon Monoxide Actionable Device Events: Locks Buttons Outlets/Switches Dimmers/Level Garage Door Openers Valves Window Shades Thermostats Sensor Device Events: Contacts | Doors | Windows Battery Level Motion Presence Illuminance Temperature Humidity Water Power Action Types Available # Speak (SSML Supported) Announcements/Broadcasts (SSML and Multi-Device Supported) Speak Tiered | Create a response that plays out in phases with unique delays between each response Announcements/Broadcasts | Create a response that plays out in phases with unique delays between each response SSML support for all Speak and Announcements Custom Sequences Weather Reports Playback/Volume Control Built-In Routine Functions: Sing a Song Flash Briefing Fun Fact Traffic Report Tell a Joke Tell a Story Say Goodbye Say Good Night! Say Good Morning! Welcome Home Sing Happy Birthday Give a Compliment Play Music (Using Alexa music providers only) Calendar Events (Non-Pin protected email only) Create Alarms Create Reminder Do Not Disturb Control Bluetooth Control (Connect/Disconnect Paired DEvices) Change Alexa Wake Word Execute Alexa Routines Configuration Options # Create a New Action Examples # View Examples","title":"Description"},{"location":"actions/actions_desc/#echo_speaks_actions","text":"","title":"Echo Speaks Actions:"},{"location":"actions/actions_desc/#current_triggers_available","text":"","title":"Current Triggers Available:"},{"location":"actions/actions_desc/#action_types_available","text":"","title":"Action Types Available"},{"location":"actions/actions_desc/#configuration_options","text":"","title":"Configuration Options"},{"location":"actions/actions_desc/#examples","text":"","title":"Examples"},{"location":"actions/config/actions_config/","text":"Action Config Options # An action is broken into 3 configuration steps: Create New Action: # Under the Echo Speaks App tap on Manage Actions Tap on Create New Action Step 1: Configure Action Type # Select the action type that will be executed by the triggers selected. Tap on Action Type . Select the desired Action Type. Move of to Step 2. Step 2: Configure Trigger Events # Tap on Action Triggers . Tap on Select Trigger Events Select your trigger types (Multiple Allowed) and press Done . You will be shown a config section for each trigger selected. Select the devices to subscribe to for the trigger type. Confuring the Changes to? option. Note: Selecting any* for the changes to input will prevent you from using the monitoring features. * If you selected any you will see these options: Otherwise you see: If you choose to configure the Only after options: Note: You can configure an additional repeat every (xx) seconds until the trigger value changes. When repeat after is configured you will see a new input for custom repeat response items. Note: Entering multiple responses in any of the triggers custom response will enable random response selection per event trigger type. Press Done/Save to return to main action config page Step 3: Configure Conditions/Restrictions # Note: Conditions are optional and just help fine tune when a action can execute. Note: Think of these conditions as the gate keeper. All conditions have to pass as a whole, meaning the more conditions the more strict your action will be to execute. Tap on Conditions/Restrictions . Configure any desired conditions. Press Done/Save to return to main action config page Step 4: Configure Action Execution # Tap on Execution Config in Step 4. This is where the desired Echo Devices are selected. Once the action type is selected you will see: Now select your echo devices to execute the action on. Note: The echo device list is populated based on device capability and the selected action type. You can now configure the remaining options. Note: The action type config options are different for each action type. So may see something different than the photo below. Note: When Speak and Announcement types are selected you will see a Global Action Text Response input. This can be confusing seeing as you may or may not have configured responses under the triggers. Think of the global response as the output for any and all triggers meaning no matter the trigger it will always use these responses even if responses are defined under triggers. But if you leave this blank it will either use the individual trigger responses or generate a generic response based on the event. Option: Volume Options may be shown based on the selected Action Type. Option: Delay Action allows you to delay the execution (xx) seconds. Once your all configured you can toggle the Test this Action? to simulate the action. NOTE: When no responses are defined the app will use all of the selected trigger types and values to randomly generate an event response to perform the test speech. Press Done/Save to return to the main action page. You can review the configuration descriptions and Press Next when ready. Now all that remains is to give the action a name. Press Done/Save to complete the creation of the new Action.","title":"Configuration"},{"location":"actions/config/actions_config/#action_config_options","text":"","title":"Action Config Options"},{"location":"actions/config/actions_config/#create_new_action","text":"","title":"Create New Action:"},{"location":"actions/config/actions_config/#step_1_configure_action_type","text":"","title":"Step 1: Configure Action Type"},{"location":"actions/config/actions_config/#step_2_configure_trigger_events","text":"","title":"Step 2: Configure Trigger Events"},{"location":"actions/config/actions_config/#step_3_configure_conditionsrestrictions","text":"","title":"Step 3: Configure Conditions/Restrictions"},{"location":"actions/config/actions_config/#step_4_configure_action_execution","text":"","title":"Step 4: Configure Action Execution"},{"location":"actions/examples/actions_examples/","text":"Example Actions # Contact Monitor Example: # This example subscribes to contact events. It\u2019s purpose is to monitor a contact and perform an action if it\u2019s in the trigger state for (xx) seconds, and has a repeat speech event if the contact trigger remains in the open state. Config Details: # Trigger Config: In this example i\u2019ve defined the custom trigger responses for both the after (xx) event as well as the repeat response. This will allow the action to use a random response for both the trigger and repeat events. Trigger & Repeat Event Responses: Condition Config: No Conditions Defined Action Execution Config: No global responses were configured here. Complex Example: # This example subscribes to presense, power, temperature, motion attributes, routine and location mode execution. With each trigger type having it\u2019s own criteria for the attributes trigger value, wait, and custom voice responses (only available when Step 3 type is speech or announcement). Config Details: # Trigger Config: In this example i\u2019ve left the custom trigger responses empty. This will allow the action to generate a basic response based on the trigger event. If you choose to add custom responses you can add multiple items using the response designer. When multiple responses are given a random one is selected for each event. Note: This is a really long screenshot (That\u2019s just a testiment to how many triggers a single action can handle) Condition Config: Time Conditions Location Conditions Alarm (HSM/SHM Modes) Condition Location Mode Condition Contact Closed Condition Action Execution Config: No global responses were configured here. Contact Monitor Example: # This example subscribes to contact events. It\u2019s purpose is to monitor a contact and perform an action if it\u2019s in the trigger state for (xx) seconds, and has a repeat speech event if the contact trigger remains in the open state. Config Details: # Trigger Config: In this example i\u2019ve defined the custom trigger responses for both the after (xx) event as well as the repeat response. This will allow the action to use a random response for both the trigger and repeat events. Trigger & Repeat Event Responses: Condition Config: No Conditions Defined Action Execution Config: No global responses were configured here.","title":"Examples"},{"location":"actions/examples/actions_examples/#example_actions","text":"","title":"Example Actions"},{"location":"actions/examples/actions_examples/#contact_monitor_example","text":"","title":"Contact Monitor Example:"},{"location":"actions/examples/actions_examples/#config_details","text":"","title":"Config Details:"},{"location":"actions/examples/actions_examples/#complex_example","text":"","title":"Complex Example:"},{"location":"actions/examples/actions_examples/#config_details_1","text":"","title":"Config Details:"},{"location":"actions/examples/actions_examples/#contact_monitor_example_1","text":"","title":"Contact Monitor Example:"},{"location":"actions/examples/actions_examples/#config_details_2","text":"","title":"Config Details:"},{"location":"configuration/hubitat/config_app/","text":"Step 1: # From the Hubitat Dashboard. Click on the Apps tab. Step 2: # Click on the +Add User App Step 3: # Locate Echo Speaks and tap on it to start the install process. Step 4: # You will now be in the main screen of the Echo Speaks App. Review the available options and enable any items you wish to activate. Scroll to the bottom of the page and click the Done button to complete the initial app install. Step 5: # This will return you to the installed Apps page. Tap on Echo Speaks to begin server deployment. Step 6: # You will be returned to the Server config page Step 7: # Continue Server Config Here: Server Configuration","title":"App"},{"location":"configuration/hubitat/config_app/#step_1","text":"","title":"Step 1:"},{"location":"configuration/hubitat/config_app/#step_2","text":"","title":"Step 2:"},{"location":"configuration/hubitat/config_app/#step_3","text":"","title":"Step 3:"},{"location":"configuration/hubitat/config_app/#step_4","text":"","title":"Step 4:"},{"location":"configuration/hubitat/config_app/#step_5","text":"","title":"Step 5:"},{"location":"configuration/hubitat/config_app/#step_6","text":"","title":"Step 6:"},{"location":"configuration/hubitat/config_app/#step_7","text":"","title":"Step 7:"},{"location":"configuration/hubitat/config_server/","text":"Step 1: # You will be returned to the Server config page. Verify Amazon region settings are correct (pink box). Then tap on the Begin Heroku Setup shown in the green box below. Step 2: # A browser window should open that looks like the one below. Highlight and copy the information in the gray box for later use. Now tap on the Deploy to Heroku button. Step 3: # You will paste the information from the previous step into the box named App Name See the green box below. Your information is going to show that the app name is not available. YOU MUST FOLLOW THE NEXT STEP EXACTLY AS WRITTEN Step 4: # THIS MUST BE DONE PRECISELY. FAILURE TO FOLLOW THIS STEP MAY RESULT IN YOUR APP NOT OPERATING PROPERLY Please tap on the app name you pasted to open your keyboard on your screen, and then tap the space bar. Now tap the back button to delete that space that you just typed in. You MUST remove the space. Once the space is removed it should now turn green as pictured below: Step 5: # Scroll to the bottom of the screen and tap on the Deploy App button. You will now see the information below as the app is being deployed. Think of the below picture as a movie.... the words will change Step 6: # Once the screen looks like the one below (It generally only takes a minute or two after starting the above). Tap on the View button. That will open this page shown below. Step 7: # At this point, you need to get your amazon login cookie: Tap on the Go to Login Page button as shown below. Step 8: # Input your CORRECT login information for the Amazon account that your devices are registered with, then tap on \u2018Sign In\u2019. When the above part is done successfully, you will see the screen below. Step 9: # At this point, close the browser window and go back into the Hubitat web interface. Open the Echo Speaks App and press Save then wait a couple of minutes. Your app needs to communicate with Amazon and this can sometimes take about 1 minute. So after waiting for about 1 minute you can open the Echo Speaks App and you should see the Installed Devices section populated. Step 10: # Once you see your devices scroll down. Tap on the Device Testing Tap on the Speech Test Step 11: # Select the devices to test and activate the Perform the Speech Test toggle. This will send a test text to speech command to selected devices. If you hear the broadcast on your echo devices, then good. If not, call Houston cause you have a problem. You\u2019re Done! # Once you have completed these steps you are done. You can now use the devices in any of your supported Hubitat automations. Congratulations!!","title":"Server"},{"location":"configuration/hubitat/config_server/#step_1","text":"","title":"Step 1:"},{"location":"configuration/hubitat/config_server/#step_2","text":"","title":"Step 2:"},{"location":"configuration/hubitat/config_server/#step_3","text":"","title":"Step 3:"},{"location":"configuration/hubitat/config_server/#step_4","text":"","title":"Step 4:"},{"location":"configuration/hubitat/config_server/#step_5","text":"","title":"Step 5:"},{"location":"configuration/hubitat/config_server/#step_6","text":"","title":"Step 6:"},{"location":"configuration/hubitat/config_server/#step_7","text":"","title":"Step 7:"},{"location":"configuration/hubitat/config_server/#step_8","text":"","title":"Step 8:"},{"location":"configuration/hubitat/config_server/#step_9","text":"","title":"Step 9:"},{"location":"configuration/hubitat/config_server/#step_10","text":"","title":"Step 10:"},{"location":"configuration/hubitat/config_server/#step_11","text":"","title":"Step 11:"},{"location":"configuration/hubitat/config_server/#youre_done","text":"","title":"You're Done!"},{"location":"configuration/smartthings/config_app/","text":"Step 1: # On your mobile device, open the SmartThings Classic App. Tap on the Automation tab. Step 2: # Scroll to the bottom of the screen and tap on + Add a SmartApp Step 3: # Scroll to the bottom of the screen again and tap on + My Apps . Step 4: # Scroll until you find Echo Speaks and tap on it to start the install process. Step 5: # You will now be in the main screen of the Echo Speaks SmartApp. Review the available options and enable any items you wish to activate. Tap on the Save/Done button in the top right corner of the screen to complete the initial app install. Step 6: # This will return you to the installed Apps page. Tap on Echo Speaks to begin server deployment. Step 7: # You will be returned to the Server config page Step 8: # Continue Server Config Here: Server Configuration","title":"App"},{"location":"configuration/smartthings/config_app/#step_1","text":"","title":"Step 1:"},{"location":"configuration/smartthings/config_app/#step_2","text":"","title":"Step 2:"},{"location":"configuration/smartthings/config_app/#step_3","text":"","title":"Step 3:"},{"location":"configuration/smartthings/config_app/#step_4","text":"","title":"Step 4:"},{"location":"configuration/smartthings/config_app/#step_5","text":"","title":"Step 5:"},{"location":"configuration/smartthings/config_app/#step_6","text":"","title":"Step 6:"},{"location":"configuration/smartthings/config_app/#step_7","text":"","title":"Step 7:"},{"location":"configuration/smartthings/config_app/#step_8","text":"","title":"Step 8:"},{"location":"configuration/smartthings/config_server/","text":"Step 1: # You will be returned to the Server config page. Verify Amazon region settings are correct (pink box). Then tap on the Begin Heroku Setup shown in the green box below. Step 2: # A browser window should open that looks like the one below. Highlight and copy the information in the gray box for later use. Now tap on the Deploy to Heroku button. Step 3: # You will paste the information from the previous step into the box named App Name See the green box below. Your information is going to show that the app name is not available. YOU MUST FOLLOW THE NEXT STEP EXACTLY AS WRITTEN Step 4: # THIS MUST BE DONE PRECISELY. FAILURE TO FOLLOW THIS STEP MAY RESULT IN YOUR APP NOT OPERATING PROPERLY Please tap on the app name you pasted to open your keyboard on your screen, and then tap the space bar. Now tap the back button to delete that space that you just typed in. You MUST remove the space. Once the space is removed it should now turn green as pictured below: Step 5: # Scroll to the bottom of the screen and tap on the Deploy App button. You will now see the information below as the app is being deployed. Think of the below picture as a movie.... the words will change Step 6: # Once the screen looks like the one below (It generally only takes a minute or two after starting the above). Tap on the View button. That will open this page shown below. Step 7: # At this point, you need to get your amazon login cookie: Tap on the Go to Login Page button as shown below. Step 8: # Input your CORRECT login information for the Amazon account that your devices are registered with, then tap on \u2018Sign In\u2019. When the above part is done successfully, you will see the screen below. Step 9: # At this point, close the browser window and go back into the SmartThings mobile app. Open the Echo Speaks SmartApp and press Save then wait a couple of minutes. Your app needs to communicate with Amazon and this can sometimes take about 1 minute. So after waiting for about 1 minute you can open the Echo Speaks App and you should see the Installed Devices section populated. Step 10: # Once you see your devices scroll down. Tap on the Device Testing Tap on the Speech Test Step 11: # Select the devices to test and activate the Perform the Speech Test toggle. This will send a test text to speech command to selected devices. If you hear the broadcast on your echo devices, then good. If not, call Houston cause you have a problem. You\u2019re Done! # Once you have completed these steps you are done. You can now use the devices in any of your supported Hubitat/SmartThings automations. Congratulations!!","title":"Server"},{"location":"configuration/smartthings/config_server/#step_1","text":"","title":"Step 1:"},{"location":"configuration/smartthings/config_server/#step_2","text":"","title":"Step 2:"},{"location":"configuration/smartthings/config_server/#step_3","text":"","title":"Step 3:"},{"location":"configuration/smartthings/config_server/#step_4","text":"","title":"Step 4:"},{"location":"configuration/smartthings/config_server/#step_5","text":"","title":"Step 5:"},{"location":"configuration/smartthings/config_server/#step_6","text":"","title":"Step 6:"},{"location":"configuration/smartthings/config_server/#step_7","text":"","title":"Step 7:"},{"location":"configuration/smartthings/config_server/#step_8","text":"","title":"Step 8:"},{"location":"configuration/smartthings/config_server/#step_9","text":"","title":"Step 9:"},{"location":"configuration/smartthings/config_server/#step_10","text":"","title":"Step 10:"},{"location":"configuration/smartthings/config_server/#step_11","text":"","title":"Step 11:"},{"location":"configuration/smartthings/config_server/#youre_done","text":"","title":"You're Done!"},{"location":"devicesupport/device_attributes/","text":"In this section, this we review device attributes and some basic example values. alarmVolume : (String) # Description : Current alarm/reminder alert volume. Output : 47 alarmSupported : (Boolean) # Description : Identifies if device supports alarm management control actions. Output : true alexaNotifications : (JSON_Object) # Description : Contains list of current device notifications. Output : [] alexaPlaylists : (JSON_Object) # Description : Contains current playlist in use by the device. Output : { \u201cHome Audio\u201d: [ { \u201ctitle\u201d: \u201cHome Audio\u201d, \u201cplaylistId\u201d: \u201ca1553cd7-f732-4f7e-ac3c-995b94860e57\u201d, \u201centryList\u201d: null, \u201cversion\u201d: \u201c1\u201d, \u201ctrackCount\u201d: 0 } ] } alexaWakeWord : (String) # Description : Contains the devices current wake word. Output : ALEXA btDeviceConnected : (String) # Description : Contains the current bluetooth device connected to the alexa device. Output : JBL Pulse 2 btDevicesPaired : (String) # Description : Contains a list of currently paired (available) bluetooth devices to the alexa device. Output : [AirPods, JBL Pulse 2] currentAlbum : (String) # Description : Contains a current audio album. Output : Dean Martin currentStation : (String) # Description : Contains a current music source. Output : Holiday Favorites Station deviceFamily : (String) # Description : Contains the device family identifier used by amazon. Output : ROOK deviceStatus : (String) # Description : Contains the current player status. Output : playing_echo_spot_gen1 deviceStyle : (String) # Description : Contains the description from the developer for the current device. Output : Echo Spot deviceType : (String) # Description : Contains the device type (model number) identifier used by amazon. Output : A10A33FOX2NUBK doNotDisturb : (String) # Description : Contains the devices current Do not Disturb status. Output : false followUpMode : (String) # Description : Whether the device immediately waits for another command after executing the first one. Output : true firmwareVer : (String) # Description : Contains the devices current firmware revision. Output : 625533420 lastCmdSentDt : (String) # Description : Contains the date/time of the last speak command. Output : Mon Dec 03 09:16:09 EST 2018 lastSpeakCmd : (String) # Description : Contains the text used by the last Speak() command. Useful for replaying the last message. Output : The Front Door Lock is unlocked lastSpokenToTime : (Timestamp) # Description : Contains the timestamp of the last command given to the alexa device. Output : 1548456169854 lastUpdated : (String) # Description : Contains the date/time of the last device data refresh. Output : Dec 3, 2018 - 12:47:43 PM lastVoiceActivity : (String) # Description : Contains the last voice command given to the alexa device. Output : what time is it onlineStatus : (String) # Description : Contains the devices current online status under amazon. Output : online permissions : (Boolean) # Description : Identifies the devices available features. Output : [TTS, alarms, amazonMusic, announce, appleMusic, bluetoothControl, doNotDisturb, flashBriefing, followUpMode, iHeartRadio, isEchoDevice, isMultiroomMember, mediaPlayer, microphone, pandoraRadio, reminders, spotify, tuneInRadio, volumeControl, wakeWord] reminderSupported : (Boolean) # Description : Identifies if device supports reminder management control actions. Output : true supportedMusic : (String) # Description : Identifies the devices supported music providers. Output : Amazon Music, Apple Music, My Library, Pandora, TuneIn, iHeartRadio trackImage : (String) # Description : Contains the current track image url. Output : https://m.media-amazon.com/images/I/71mwv+MFxSL.UL600.jpg trackImageHtml : (String) # Description : Contains the current track image as an html object for dashboards. Output : <img src=\"https://m.media-amazon.com/images/I/71mwv+MFxSL.UL600.jpg\"/> ttsSupported : (Boolean) # Description : Identifies if device supports text to speech actions. Output : true volumeSupported : (Boolean) # Description : Identifies if device supports volume control actions. Output : true wakeWords : (Enum) # Description : Contains list of available alexa wake words. Output : [\u201cALEXA\u201d,\u201dAMAZON\u201d,\u201dECHO\u201d,\u201dCOMPUTER\u201d] wasLastSpokeToDevice : (Boolean) # Description : Used to identify if the device was the last device spoken to on your account. Output : true wifiNetwork : (String) # Description : Contains the devices current Wifi Network SSID. Output : Echo Speaks Wifi","title":"Attributes"},{"location":"devicesupport/device_attributes/#alarmvolume_string","text":"","title":"alarmVolume: (String)"},{"location":"devicesupport/device_attributes/#alarmsupported_boolean","text":"","title":"alarmSupported: (Boolean)"},{"location":"devicesupport/device_attributes/#alexanotifications_json_object","text":"","title":"alexaNotifications: (JSON_Object)"},{"location":"devicesupport/device_attributes/#alexaplaylists_json_object","text":"","title":"alexaPlaylists: (JSON_Object)"},{"location":"devicesupport/device_attributes/#alexawakeword_string","text":"","title":"alexaWakeWord: (String)"},{"location":"devicesupport/device_attributes/#btdeviceconnected_string","text":"","title":"btDeviceConnected: (String)"},{"location":"devicesupport/device_attributes/#btdevicespaired_string","text":"","title":"btDevicesPaired: (String)"},{"location":"devicesupport/device_attributes/#currentalbum_string","text":"","title":"currentAlbum: (String)"},{"location":"devicesupport/device_attributes/#currentstation_string","text":"","title":"currentStation: (String)"},{"location":"devicesupport/device_attributes/#devicefamily_string","text":"","title":"deviceFamily: (String)"},{"location":"devicesupport/device_attributes/#devicestatus_string","text":"","title":"deviceStatus: (String)"},{"location":"devicesupport/device_attributes/#devicestyle_string","text":"","title":"deviceStyle: (String)"},{"location":"devicesupport/device_attributes/#devicetype_string","text":"","title":"deviceType: (String)"},{"location":"devicesupport/device_attributes/#donotdisturb_string","text":"","title":"doNotDisturb: (String)"},{"location":"devicesupport/device_attributes/#followupmode_string","text":"","title":"followUpMode: (String)"},{"location":"devicesupport/device_attributes/#firmwarever_string","text":"","title":"firmwareVer: (String)"},{"location":"devicesupport/device_attributes/#lastcmdsentdt_string","text":"","title":"lastCmdSentDt: (String)"},{"location":"devicesupport/device_attributes/#lastspeakcmd_string","text":"","title":"lastSpeakCmd: (String)"},{"location":"devicesupport/device_attributes/#lastspokentotime_timestamp","text":"","title":"lastSpokenToTime: (Timestamp)"},{"location":"devicesupport/device_attributes/#lastupdated_string","text":"","title":"lastUpdated: (String)"},{"location":"devicesupport/device_attributes/#lastvoiceactivity_string","text":"","title":"lastVoiceActivity: (String)"},{"location":"devicesupport/device_attributes/#onlinestatus_string","text":"","title":"onlineStatus: (String)"},{"location":"devicesupport/device_attributes/#permissions_boolean","text":"","title":"permissions: (Boolean)"},{"location":"devicesupport/device_attributes/#remindersupported_boolean","text":"","title":"reminderSupported: (Boolean)"},{"location":"devicesupport/device_attributes/#supportedmusic_string","text":"","title":"supportedMusic: (String)"},{"location":"devicesupport/device_attributes/#trackimage_string","text":"","title":"trackImage: (String)"},{"location":"devicesupport/device_attributes/#trackimagehtml_string","text":"","title":"trackImageHtml: (String)"},{"location":"devicesupport/device_attributes/#ttssupported_boolean","text":"","title":"ttsSupported: (Boolean)"},{"location":"devicesupport/device_attributes/#volumesupported_boolean","text":"","title":"volumeSupported: (Boolean)"},{"location":"devicesupport/device_attributes/#wakewords_enum","text":"","title":"wakeWords: (Enum)"},{"location":"devicesupport/device_attributes/#waslastspoketodevice_boolean","text":"","title":"wasLastSpokeToDevice: (Boolean)"},{"location":"devicesupport/device_attributes/#wifinetwork_string","text":"","title":"wifiNetwork: (String)"},{"location":"devicesupport/supported_devices/","text":"Devices tested to work with Echo Speaks TTS # Official Amazon Devices Echo Show (Gen 1, 2) Echo Show 5 Echo Show 8 (Coming Soon) Echo Studio (Coming Soon) Echo Buds (Coming Soon) Echo Dot (Gen 1, 2, 3) Echo (Gen 1, 2, 3) Echo Plus (Gen 1, 2) Echo Spot Echo Input Echo Auto (Partial Success) Echo Tap Fire TV (Gen 1, 2, 3) (Need more Data) Fire TV Stick (Gen 1, 2, 3) (Need more Data) Fire TV Cube Kindle Fire Tablets (HD Fire Models) (Need more Data) Other Devices with Alexa Ecobee 4 One-Link Safe and Sound Alexa App for Windows 10 Fabriq Chorus and Riff Logitech Blase Vobot Bunny Lenovo SmartTab Notice # There are a lot of devices out there that have Alexa integrated which may or may not display in the Echo Speaks app. We are attempting to make a way to better identify supported devices. In the mean time I will update this list as often as I can. Was your Alexa Device Incorrectly Identified? # Please create a new issue here: https://github.com/tonesto7/echo-speaks/issues Provide the following info in the issue: DeviceType id (eg. A38949IHXHRQ5P) Model Name Description Generation of the device","title":"Supported Devices"},{"location":"devicesupport/supported_devices/#devices_tested_to_work_with_echo_speaks_tts","text":"","title":"Devices\u00a0tested\u00a0to work with Echo Speaks TTS"},{"location":"devicesupport/supported_devices/#notice","text":"There are a lot of devices out there that have Alexa integrated which may or may not display in the Echo Speaks app. We are attempting to make a way to better identify supported devices. In the mean time I will update this list as often as I can.","title":"Notice"},{"location":"devicesupport/supported_devices/#was_your_alexa_device_incorrectly_identified","text":"","title":"Was your Alexa Device Incorrectly Identified?"},{"location":"devicesupport/commands/action_commands/","text":"doNotDisturbOn() # Description: Activates Do Not Disturb for the device Required Parameters None Accepted doNotDisturbOff() # Description: Disables Do Not Disturb for the device Required Parameters None Accepted storeCurrentVolume() # Description: NOTICE: This is not always accurate. We can not aquire volume unless media is playing or change the volume using SmartThings once Captures current device volume Required Parameters None Accepted restoreLastVolume() # Description: Restores volume to captured volume using storeCurrentVolume() Required Parameters None Accepted setAlarmVolume(value) # Description: NOTE: Only available on device that support alarms and reminders Sets the Echo Devices Alarm and Reminder Notification volume Required Parameters Volume (Integer): Between 0-100 Example: setAlarmVolume(40) stopAllDevices() # Description: NOTICE: Only send this command to a single device and not all devices Stops audio playback on all echo devices Parameters None Accepted Example Usage: stopAllDevices() setWakeWord(\u201cECHO\u201d) # Description: Used to change the alexa wake word invocation name Required Parameters WakeWord (String): You can use one of the following: [\"ALEXA\", \"AMAZON\", \"ECHO\", \"COMPUTER\"] Example Usage: setWakeWord(\"ECHO\") renameDevice(\u201cNew Device Name\u201d) # Description: Changes the alexa device name under your amazon account Required Parameters Device Name (String): Example Usage: renameDevice(\"New Device Name\") getDeviceActivity() # Description: Updates the activity data for the attributes \"wasLastSpokenToDevice\" and \"lastVoiceActivity\" Parameters None Accepted Example Usage: getDeviceActivity() getBluetoothDevices() # Description: Refreshes all bluetooth devices for the alexa device Parameters None Accepted Example Usage: getBluetoothDevices() connectBluetooth(\u201cJBL Pulse 2\u201d) # Description: Will connected a paired bluetooth device by name. (Look at attribute `btDevicesPaired` for a list of paired device names Required Parameters Device Name (String): Look at attribute `btDevicesPaired` for a list of paired device names Example Usage: connectBluetooth(\"JBL Pulse 2\") disconnectBluetooth() # Description: Will disconnect the the currently connected bluetooth device Parameters None Accepted Example Usage: disconnectBluetooth() removeBluetooth(\u201cJBL Pulse 2\u201d) # Description: Removes bluetooth device pairing from alexa device by name. (Look at attribute `btDevicesPaired` for a list of paired device names Required Parameters Device Name (String): Look at attribute `btDevicesPaired` for a list of paired device names Example Usage: removeBluetooth(\"JBL Pulse 2\") executeSequenceCommand(sequenceString) # Description: Allows you to pass a string of sequences to Amazon as a single command that will be executed one at a time Required Parameters Sequence String (String): - weather - traffic - flashbriefing - goodmorning - goodnight - cleanup - singasong - tellstory - funfact - joke - playsearch - calendartoday - calendartomorrow - calendarnext - stop - stopalldevices - cannedtts_random::(accepted values below) * goodbye * confirmations * goodmorning * compliments * birthday * goodnight * iamhome - wait::value (seconds) - volume::value (0-100) - speak::message - announcement::message - announcementall::message - pushnotification::message - amazonmusic::search term - applemusic::search term - iheartradio::search term - pandora::search term - spotify::search term - tunein::search term - cloudplayer::search term Enter the command in a format exactly like this: volume::40,, speak::this is so silly,, wait::60, weather,, cannedtts_random::goodbye,, traffic,, amazonmusic::green day,, volume::30 Each command::value pair needs to be separated by a double comma `,,` and the separator between the command and value must be command`::`value. Example Usage: executeSequenceCommand(\"volume::50,, speak::This is pretty cool,, volume::30\")","title":"Action Commands"},{"location":"devicesupport/commands/action_commands/#donotdisturbon","text":"","title":"doNotDisturbOn()"},{"location":"devicesupport/commands/action_commands/#donotdisturboff","text":"","title":"doNotDisturbOff()"},{"location":"devicesupport/commands/action_commands/#storecurrentvolume","text":"","title":"storeCurrentVolume()"},{"location":"devicesupport/commands/action_commands/#restorelastvolume","text":"","title":"restoreLastVolume()"},{"location":"devicesupport/commands/action_commands/#setalarmvolumevalue","text":"","title":"setAlarmVolume(value)"},{"location":"devicesupport/commands/action_commands/#stopalldevices","text":"","title":"stopAllDevices()"},{"location":"devicesupport/commands/action_commands/#setwakewordecho","text":"","title":"setWakeWord(\"ECHO\")"},{"location":"devicesupport/commands/action_commands/#renamedevicenew_device_name","text":"","title":"renameDevice(\"New Device Name\")"},{"location":"devicesupport/commands/action_commands/#getdeviceactivity","text":"","title":"getDeviceActivity()"},{"location":"devicesupport/commands/action_commands/#getbluetoothdevices","text":"","title":"getBluetoothDevices()"},{"location":"devicesupport/commands/action_commands/#connectbluetoothjbl_pulse_2","text":"","title":"connectBluetooth(\"JBL Pulse 2\")"},{"location":"devicesupport/commands/action_commands/#disconnectbluetooth","text":"","title":"disconnectBluetooth()"},{"location":"devicesupport/commands/action_commands/#removebluetoothjbl_pulse_2","text":"","title":"removeBluetooth(\"JBL Pulse 2\")"},{"location":"devicesupport/commands/action_commands/#executesequencecommandsequencestring","text":"","title":"executeSequenceCommand(sequenceString)"},{"location":"devicesupport/commands/alerts_commands/","text":"createAlarm(Label, Date, Time) # Description: NOTICE: Not all alexa devices support this feature This will create audible alarms for a specific device. Required Parameters Label (String): Label to identify the alarm in the Alexa App Date (String): This must be in this format (Year-Month-Day) Time (String): This must be in this 24-hour time format (HH:MM) Example: createAlarm(\"Alarm Label\", \"2019-01-03\", \"18:10\") createReminder(Message, Date, Time) # Description: NOTICE: Not all alexa devices support this feature This will create audible Reminder and read back the label as the reminder message. Required Parameters Reminder (String): Reminder message that is spoken back Date (String): This must be in this format (Year-Month-Day) Time (String): This must be in this 24-hour time format (HH:MM) Example: createReminder(\"Take out the trash\", \"2019-01-03\", \"18:10\") sendAlexaAppNotification(message) # Description: Sends a push notification via the Alexa Mobile app. Required Parameters Message (String): String between 1-400 characters in length Example Usage: sendAlexaAppNotification(\"I have something important to alert you about\")","title":"Alarm & Reminders Commands"},{"location":"devicesupport/commands/alerts_commands/#createalarmlabel_date_time","text":"","title":"createAlarm(Label, Date, Time)"},{"location":"devicesupport/commands/alerts_commands/#createremindermessage_date_time","text":"","title":"createReminder(Message, Date, Time)"},{"location":"devicesupport/commands/alerts_commands/#sendalexaappnotificationmessage","text":"","title":"sendAlexaAppNotification(message)"},{"location":"devicesupport/commands/music_commands/","text":"togglePlayback() # Description: NOTICE: Not available on all devices. Only works on devices that support music playback control Used to toggle between playing and stopped state Example: togglePlayback() searchMusic(searchPhrase, providerId) # Description: NOTICE: Not available on all devices. Only works on devices that support music playback control Used to play music from the desired music provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. ProviderId (String): ProviderId's allowed [CLOUDPLAYER, AMAZON_MUSIC, APPLE_MUSIC, I_HEART_RADIO, PANDORA, SPOTIFY, TUNEIN] Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchMusic(\"thriller\", \"AMAZON_MUSIC\") Optional: searchMusic(\"thriller on the upstairs\", \"AMAZON_MUSIC\", 40, 300) Info: I have discovered that when trying to play songs I had to add the word song to the search phrase. --- ### searchAmazonMusic(searchPhrase) Description: NOTICE: Not available on all devices. Only works on devices that support music playback control Used to play music from Amazon Music provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchAmazonMusic(\"thriller\") Optional: searchAmazonMusic(\"thriller on the upstairs\", 40, 300) Info: I have discovered that when trying to play songs I had to add the word song to the search phrase. --- ### searchAppleMusic(searchPhrase) Description: NOTICE: Not available on all devices. Only works on devices that support music playback control and Apple Music Used to play music from Apple Music provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchAppleMusic(\"thriller\") Optional: searchAppleMusic(\"thriller on the upstairs\", 40, 300) Info: I have discovered that when trying to play songs I had to add the word song to the search phrase. --- ### searchPandora(searchPhrase) Description: NOTICE: Not available on all devices. Requires connection of Pandora skills Used to play music from Pandora Radio provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchPandora(\"thriller\") Optional: searchPandora(\"thriller on the upstairs\", 40, 300) --- ### searchIheart(searchPhrase) Description: NOTICE: Not available on all devices. Requires connection of iHeart Radio Skill Used to play music from iHeartRadio provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchIheart(\"thriller\") Optional: searchIheart(\"thriller on the upstairs\", 40, 300) --- ### searchSiriusXm(searchPhrase) Description: NOTICE: Not available on all devices. Requires Sirius XM subscription. Used to play music from Sirius XM provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchSiriusXm(\"thriller\") Optional: searchSiriusXm(\"thriller on the upstairs\", 40, 300) --- ### searchSpotify(searchPhrase) Description: NOTICE: Not available on all devices. Requires Spotify subscription. Used to play music from Spotify provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchSpotify(\"thriller\") Optional: searchSpotify(\"thriller on the upstairs\", 40, 300) Info: I have discovered that when trying to play songs I had to add the word song to the search phrase. --- ### searchTuneIn(searchPhrase) Description: NOTICE: Not available on all devices. Only works on devices that support music playback control and Tune-In Radio Used to play music from Tune-In Radio provider Required Parameters SearchPhrase (String): String between 0-100 characters in length. This can be song name, playlist, artist. You can also add an audio group in the search to have it played under a group of alexa devices. Optional Parameters Volume (Integer): Between 0-100 sleepSeconds (Integer): Number of seconds to play the music (Sleep timer) Example: searchTuneIn(\"thriller\") Optional: searchTuneIn(\"thriller on the upstairs\", 40, 300) --- ### Testing I've recently added a Music Search Test section to the main page of the SmartThings/Hubitat app.","title":"Music Commands"},{"location":"devicesupport/commands/music_commands/#toggleplayback","text":"","title":"togglePlayback()"},{"location":"devicesupport/commands/music_commands/#searchmusicsearchphrase_providerid","text":"","title":"searchMusic(searchPhrase, providerId)"},{"location":"devicesupport/commands/speech_commands/","text":"replayText() # Description: Will replay the last text sent to the device. Required Parameters None Accepted setVolumeAndSpeak(volume, message) # Description: NOTICE: This command is highly recommend in place of sending an individual command for both volume and speaking. When used it is set to Amazon as a single command and executed in a sequence. Sends volume command first, then plays message. Required Parameters Volume (Integer): Between 0-100 Message (String): String between 1-400 characters in length Example Usage: setVolumeAndSpeak(47, \"The Front door is unlocked\") setVolumeSpeakAndRestore(volume, message) # Description: NOTICE: This command is highly recommended in place of sending individual commands for setVolume(47), speak(\"The Front door is unlocked\"), and setVolume(30). When used it is set to Amazon as a single command and executed in a sequence When the command is called it captures the current volume and restores immediately after the message is played. Sends volume command first, then plays message, and restores original volume Required Parameters Volume (Integer): Between 0-100 Message (String): String between 1-400 characters in length Restore Volume (Integer): Between 0-100 Example Usage: setVolumeSpeakAndRestore(50, \"The Front door is unlocked\", 30) playWeather() # Description: Alexa will give the current weather conditions Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playWeather() Optional: playWeather(30, 50) playSingASong() # Description: Alexa will sing a random song Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playSingASong() Optional: playSingASong(30, 50) playFlashBrief() # Description: Alexa will play the your flash briefing (If device supports it) Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playFlashBrief() Optional: playFlashBrief(30, 50) sayBirthday() # Description: Alexa will say a random happy birthday message Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: sayBirthday() Optional: sayBirthday(30, 50) sayCompliment() # Description: Alexa will say a random compliment message Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: sayCompliment() Optional: sayCompliment(30, 50) sayGoodbye() # Description: Alexa will say a random goodbye message Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: sayGoodbye() Optional: sayGoodbye(30, 50) sayGoodMorning() # Description: Alexa will play the your good morning run down Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: sayGoodMorning() Optional: sayGoodMorning(30, 50) sayGoodNight() # Description: Alexa will say a random good night message Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: sayGoodNight() Optional: sayGoodNight(30, 50) sayWelcomeHome() # Description: Alexa will say a random welcome home message Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: sayWelcomeHome() Optional: sayWelcomeHome(30, 50) playTraffic() # Description: Alexa will give the current traffic condition on your way to work Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playTraffic() Optional: playTraffic(30, 50) playTellStory() # Description: Alexa will tell a random story Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playTellStory() Optional: playTellStory(30, 50) playFunFact() # Description: Alexa will tell a random fun fact Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playFunFact() Optional: playFunFact(30, 50) playJoke() # Description: Alexa will tell a random joke Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playJoke() Optional: playJoke(30, 50) playCalendarToday() # Description: NOTE: Only available when you connected calendar accounts to your amazon alexa account Alexa will read all of the calendar events for the day Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playCalendarToday() Optional: playCalendarToday(30, 50) playCalendarTomorrow() # Description: NOTE: Only available when you connected calendar accounts to your amazon alexa account Alexa will read all of the calendar events for tomorrow Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playCalendarTomorrow() Optional: playCalendarTomorrow(30, 50) playCalendarNext() # Description: NOTE: Only available when you connected calendar accounts to your amazon alexa account Alexa will read the next calendar event Optional Parameters Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playCalendarNext() Optional: playCalendarNext(30, 50) playAnnouncement(message) # Description: This will make an announcement with the message on the device executing the command Required Parameters Message (String): String between 1-400 characters in length Optional Parameters Title (String): String between 1-40 characters in length (For Echo Show/Spot Display) Volume (Integer): Between 0-100 Restore Volume (Integer): Between 0-100 Example: playAnnouncement(\"the garage door has opened\", \"Door Alert\", 40, 30) playAnnouncementAll(message) # Description: This will make an announcement with the message on all echo devices on your account Notice: This command is a complicated one. If you want to announce on all of your echo devices just select one device to send the command to. Amazon will send it to all devices on it's end. So a single device can trigger all to speak Required Parameters Message (String): String between 1-400 characters in length Optional Parameters Title(String): String between 1-400 characters in length (For Echo Show/Spots Display) Example: playAnnouncementAll(\"the garage door has opened\", \"Door Alert\")","title":"Speech Commands"},{"location":"devicesupport/commands/speech_commands/#replaytext","text":"","title":"replayText()"},{"location":"devicesupport/commands/speech_commands/#setvolumeandspeakvolume_message","text":"","title":"setVolumeAndSpeak(volume, message)"},{"location":"devicesupport/commands/speech_commands/#setvolumespeakandrestorevolume_message","text":"","title":"setVolumeSpeakAndRestore(volume, message)"},{"location":"devicesupport/commands/speech_commands/#playweather","text":"","title":"playWeather()"},{"location":"devicesupport/commands/speech_commands/#playsingasong","text":"","title":"playSingASong()"},{"location":"devicesupport/commands/speech_commands/#playflashbrief","text":"","title":"playFlashBrief()"},{"location":"devicesupport/commands/speech_commands/#saybirthday","text":"","title":"sayBirthday()"},{"location":"devicesupport/commands/speech_commands/#saycompliment","text":"","title":"sayCompliment()"},{"location":"devicesupport/commands/speech_commands/#saygoodbye","text":"","title":"sayGoodbye()"},{"location":"devicesupport/commands/speech_commands/#saygoodmorning","text":"","title":"sayGoodMorning()"},{"location":"devicesupport/commands/speech_commands/#saygoodnight","text":"","title":"sayGoodNight()"},{"location":"devicesupport/commands/speech_commands/#saywelcomehome","text":"","title":"sayWelcomeHome()"},{"location":"devicesupport/commands/speech_commands/#playtraffic","text":"","title":"playTraffic()"},{"location":"devicesupport/commands/speech_commands/#playtellstory","text":"","title":"playTellStory()"},{"location":"devicesupport/commands/speech_commands/#playfunfact","text":"","title":"playFunFact()"},{"location":"devicesupport/commands/speech_commands/#playjoke","text":"","title":"playJoke()"},{"location":"devicesupport/commands/speech_commands/#playcalendartoday","text":"","title":"playCalendarToday()"},{"location":"devicesupport/commands/speech_commands/#playcalendartomorrow","text":"","title":"playCalendarTomorrow()"},{"location":"devicesupport/commands/speech_commands/#playcalendarnext","text":"","title":"playCalendarNext()"},{"location":"devicesupport/commands/speech_commands/#playannouncementmessage","text":"","title":"playAnnouncement(message)"},{"location":"devicesupport/commands/speech_commands/#playannouncementallmessage","text":"","title":"playAnnouncementAll(message)"},{"location":"installation/hubitat/app_install/","text":"Step 1: # Proceed to your Hubitat Dashboard Step 2: # Navigate to the Apps Code Section of the by clicking on Apps Code tab at the left of your screen: Step 3: # Create a new smartapp by clicking on the +New App button found in the top right corner of this page: Step 4: # Click on the Import button at the top of the page: Copy this URL into the window: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/smartapps/tonesto7/echo-speaks.src/echo-speaks.groovy Click Import Click Save Step 5: # You will now enable the Apps OAuth configuration. Please click on the OAuth button and scroll to the bottom of the next screen. Step 6: # On the OAuth page click the Enable OAuth in App button as seen below: Step 7: # Finally, click on Update . Step 8: # Repeat Steps 3 & 4 for the Actions Child App: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/smartapps/tonesto7/echo-speaks-actions.src/echo-speaks-actions.groovy Step 9: # Repeat Steps 3 & 4 for the Zone Child App: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/smartapps/tonesto7/echo-speaks-zones.src/echo-speaks-zones.groovy Step 10: # Continue Device Driver Install Here: Device Manual Install","title":"App install"},{"location":"installation/hubitat/app_install/#step_1","text":"","title":"Step 1:"},{"location":"installation/hubitat/app_install/#step_2","text":"","title":"Step 2:"},{"location":"installation/hubitat/app_install/#step_3","text":"","title":"Step 3:"},{"location":"installation/hubitat/app_install/#step_4","text":"","title":"Step 4:"},{"location":"installation/hubitat/app_install/#step_5","text":"","title":"Step 5:"},{"location":"installation/hubitat/app_install/#step_6","text":"","title":"Step 6:"},{"location":"installation/hubitat/app_install/#step_7","text":"","title":"Step 7:"},{"location":"installation/hubitat/app_install/#step_8","text":"","title":"Step 8:"},{"location":"installation/hubitat/app_install/#step_9","text":"","title":"Step 9:"},{"location":"installation/hubitat/app_install/#step_10","text":"","title":"Step 10:"},{"location":"installation/hubitat/device_install/","text":"Step 1: # Click on the Drivers Code tab: Step 2: # Create a new Driver by clicking on +New Driver : Step 3: # Click on the Import button at the top of the page: Step 4: : # Copy this URL into the window: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/drivers/echo-speaks-device.groovy Click Import Click Save Step 5: : # Repeat Steps 1-4 for the Web Socket Driver: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/drivers/echo-speaks-ws.groovy Click Import Click Save Step 6: # Continue App Configuration Here: SmartApp Configuration","title":"Device install"},{"location":"installation/hubitat/device_install/#step_1","text":"","title":"Step 1:"},{"location":"installation/hubitat/device_install/#step_2","text":"","title":"Step 2:"},{"location":"installation/hubitat/device_install/#step_3","text":"","title":"Step 3:"},{"location":"installation/hubitat/device_install/#step_4","text":"","title":"Step 4::"},{"location":"installation/hubitat/device_install/#step_5","text":"","title":"Step 5::"},{"location":"installation/hubitat/device_install/#step_6","text":"","title":"Step 6:"},{"location":"installation/hubitat/installs/","text":"Manual Install # App Install Device Install","title":"Install Options"},{"location":"installation/hubitat/installs/#manual_install","text":"","title":"Manual Install"},{"location":"installation/smartthings/app_install/","text":"Step 1: # Log-in to the SmartThings IDE at ST IDE Once you login ensure you are able to see your hub and devices under the Locations tab. These instruction assume that you have already registered an account on the SmartThings IDE website. Otherwise, please create the account before proceeding any further. Step 2: # Navigate to the SmartApps Section of the SmartThings IDE by clicking My SmartApps tab at the top of your screen: Step 3: # Create a new smartapp by clicking on the button found in the top right corner of this page: Step 4: # Click on the button found at the top of the screen: Step 5: # You will now be at this page: Step 6: # Copy the Echo Speaks source code from this link: SmartApp Code Press CTRL+A to Select all text and CTRL+C to Copy the selected text. Now paste it into the large white box on your screen with CTRL+V . Scroll to the bottom of the page and click on the Create button. Step 7: # You will now see the screen below: Click on the Save button. After a few seconds click on the Publish button, and then click the For Me button. Step 8: # You will now enable the SmartApps OAuth configuration. Please click on the App Settings button and scroll to the bottom of the next screen. Step 9: # Click on the OAuth tab and then click the Enable OAuth in Smart App button as seen below: Step 10: # Finally, click on Update . Step 11: # Repeat Steps 3 to 7 for the Actions Child App: Action Child App Code Repeat Steps 3 to 7 for the Zone Child App: Action Child App Code Step 12: # Continue Device Handler Install Here: Device Manual Install","title":"App install"},{"location":"installation/smartthings/app_install/#step_1","text":"","title":"Step 1:"},{"location":"installation/smartthings/app_install/#step_2","text":"","title":"Step 2:"},{"location":"installation/smartthings/app_install/#step_3","text":"","title":"Step 3:"},{"location":"installation/smartthings/app_install/#step_4","text":"","title":"Step 4:"},{"location":"installation/smartthings/app_install/#step_5","text":"","title":"Step 5:"},{"location":"installation/smartthings/app_install/#step_6","text":"","title":"Step 6:"},{"location":"installation/smartthings/app_install/#step_7","text":"","title":"Step 7:"},{"location":"installation/smartthings/app_install/#step_8","text":"","title":"Step 8:"},{"location":"installation/smartthings/app_install/#step_9","text":"","title":"Step 9:"},{"location":"installation/smartthings/app_install/#step_10","text":"","title":"Step 10:"},{"location":"installation/smartthings/app_install/#step_11","text":"","title":"Step 11:"},{"location":"installation/smartthings/app_install/#step_12","text":"","title":"Step 12:"},{"location":"installation/smartthings/auto_install/","text":"This is the simplest way to get Echo Speak Installed as well as other community apps Step 1: # Please visit here for instructions: SmartThings Community Installer Step 2: # Continue to SmartApp Configuration Server Configuration","title":"Auto install"},{"location":"installation/smartthings/auto_install/#step_1","text":"","title":"Step 1:"},{"location":"installation/smartthings/auto_install/#step_2","text":"","title":"Step 2:"},{"location":"installation/smartthings/device_install/","text":"Step 1: # Log into the IDE. Click on the My Device Handlers tab: Followed by the Create New Device Handler : Finally the From Code tab: Step 2: # Click on this link: Device Handler Code to obtain the Device Handler code. Press CTRL+A to Select all text and CTRL+C to Copy the selected text. Now paste it into the large white box on your screen with CTRL+V . Scroll to the bottom of the page and click on the Create button. Step 3: # Scroll to the top of the screen and click the Save button. Click on by the Publish button and then For Me . Step 4: # Continue SmartApp Configuration Here: SmartApp Configuration","title":"Device install"},{"location":"installation/smartthings/device_install/#step_1","text":"","title":"Step 1:"},{"location":"installation/smartthings/device_install/#step_2","text":"","title":"Step 2:"},{"location":"installation/smartthings/device_install/#step_3","text":"","title":"Step 3:"},{"location":"installation/smartthings/device_install/#step_4","text":"","title":"Step 4:"},{"location":"installation/smartthings/github_install/","text":"Enabling the GitHub Integration in the IDE is by far the second easiest way to install and get the latest updates for Echo Speaks Apps and devices. Add GitHub Repo to IDE # Step 1: # If you haven\u2019t enabled Git integration (one time configuration) under the IDE please visit here for instructions: IDE GitHub Integration Instructions NOTE: Git Integration is not currently available outside of US and UK Otherwise Move to Step 2. Step 2: # First, click on the Settings button at the top of SmartThings IDE page (this will only appear after completing the one-time integration with GitHub) Step 3: # Click on Add new repository Enter the information below: Owner Name Branch tonesto7 echo-speaks master Step 4: # Click on Save to close the GitHub Repository Integration page. SmartApp Code Install # Step 1: # Click the My SmartApps button at the top of the IDE Click the Update from Repo button at the upper-right corner of the IDE Click on echo-speaks (master) from the drop down menu. On the right-hand column labelled New (Only in Github), scroll down to click the app to install. This will be: echo-speaks.groovy echo-speaks-actions.groovy echo-speaks-zones.groovy Check the Publish box and Click the Execute Update in the bottom-right corner of the screen. When it\u2019s completed syncing, the new app should now appear in the IDE. If they ever change color, that indicates a new version is available. Step 2: # You will now enable the SmartApps OAuth configuration. Please click on the App Settings button and scroll to the bottom of the next screen. Step 3: # Click on the OAuth tab and then click the Enable OAuth in Smart App button as seen below: Step 4: # Finally, click on Update . Device Code Install # Step 1: # Click the My Device Handlers button at the top of the IDE Click the Update from Repo button at the upper-right corner of the IDE Click on echo-speaks (master) from the drop down menu. On the right-hand column labelled New (Only in Github), scroll down to click the app to install. This will be: echo-speaks-device.groovy Check the Publish box and Click the Execute Update in the bottom-right corner of the screen. When it\u2019s completed syncing, the new device should now appear in the IDE. If they ever change color, that indicates a new version is available. Step 4: # Continue SmartApp Configuration Here: SmartApp Configuration","title":"Github install"},{"location":"installation/smartthings/github_install/#add_github_repo_to_ide","text":"","title":"Add GitHub Repo to IDE"},{"location":"installation/smartthings/github_install/#step_1","text":"","title":"Step 1:"},{"location":"installation/smartthings/github_install/#step_2","text":"","title":"Step 2:"},{"location":"installation/smartthings/github_install/#step_3","text":"","title":"Step 3:"},{"location":"installation/smartthings/github_install/#step_4","text":"","title":"Step 4:"},{"location":"installation/smartthings/github_install/#smartapp_code_install","text":"","title":"SmartApp Code Install"},{"location":"installation/smartthings/github_install/#step_5","text":"","title":"Step 1:"},{"location":"installation/smartthings/github_install/#step_6","text":"","title":"Step 2:"},{"location":"installation/smartthings/github_install/#step_7","text":"","title":"Step 3:"},{"location":"installation/smartthings/github_install/#step_8","text":"","title":"Step 4:"},{"location":"installation/smartthings/github_install/#device_code_install","text":"","title":"Device Code Install"},{"location":"installation/smartthings/github_install/#step_9","text":"","title":"Step 1:"},{"location":"installation/smartthings/github_install/#step_10","text":"","title":"Step 4:"},{"location":"installation/smartthings/installs/","text":"Automated Install # Community Installer IDE (GitHub) Install # GitHub Install Manual Install # App Install Device Install","title":"Install Options"},{"location":"installation/smartthings/installs/#automated_install","text":"","title":"Automated Install"},{"location":"installation/smartthings/installs/#ide_github_install","text":"","title":"IDE (GitHub) Install"},{"location":"installation/smartthings/installs/#manual_install","text":"","title":"Manual Install"},{"location":"support/common_errors/","text":"There will be times when you may receive an error message or encounter an issue Hopefully you will find a fix from one of the items below! No Speech Output # This is kind of a tricky one because it could be a few things. Internet/WiFi Issues Amazon Server Issues/Outages Hubitat/SmartThings Cloud Outages For the most part you will get a clear reason in the Hubitat/SmartThings live logs. I\u2019ve experienced the rare occasion where the internet connection was going up and down. and because it wasn\u2019t for extended periods Amazon never reported the device offline. So commands were being sent successfully but never reached the device. (I have no way to fix this because I have no way to know if Amazon itself could reach the device. Only that it successfully received the command we sent.) When your device is offline (according to Amazon) you will see this entry in the logs for every command received by the device. [WARN] Commands NOT Allowed! Device is currently (OFFLINE) | Type: (TTS) Status Code 400/401 # This failure is almost always due to the expiration of your cookie. Simply clear the log in information for the Heroku App and log back in to Amazon. This should fix your issue right away. Steps to Fix Step 1: # Log into the https://dashboard.heroku.com website and click on your echo-speaks-xxxxxxx app. Step 2: # Then click on the Settings . Step 3: # Scroll down to the Domains and Certificates section (pictured below). Step 4: # Click on the link listed next to Domain . This will take you to the Amazon Cookie Retrieval page which looks similar to the picture below. If it shows \u2018Authentication Good` then you should then be good to go. If you are directed to log in again, then just do it and you should then be good. Status Code 404 (DEPRECATED) # Failed with status code 404 @line 890 (asyncCommandHandler) The Heroku service will put an app to sleep once it detects no activity for 30 minutes. The Echo Speaks system has a \u201cHeart Beat\u201d that talks to Heroku to keep the app awake. We are dealing with the cloud here, so sometimes there may be a delay in the Heart Beat, resulting in a nap for your server. Steps to Fix Step 1: # To remedy this it is helpful to open the Web Config page. Which normally wakes the service up. Sometimes this may take a couple of minutes. Step 2: # You can easily navigate to this page by following these steps. We recommend that you create a link to the page in case of any future incidents, then it will be a simple one click fix. Step 3: # Log into the Heroku.com website and click on your app. Then click on Settings and scroll down to the Domains and Certificates section (pictured below). Step 4: # Click on the link listed next to Domain . This will take you to the Amazon Cookie Retrieval page which looks similar to the picture below. If it shows \u2018Authentication Good` then you should then be good to go. If you are directed to log in again, then just do it and you should then be good. /ap/cvf Request Error # If you see this error when you are attempting to do the Amazon Login part of the server deployment, We have found this to be due to having had the Amazon 2FA (2 Step Verfication) service activated, and then later turned off. Unfortunately, once you have had this service turned on, it will have to be on for Echo Speaks to work properly. You may or may not remember ever having it turned on in the past, but with the presence of this error, it is very possible. To remedy this error you will need to turn the 2FA service back on and redeploy the server. Didn\u2019t See your Issue here?: # You can view open issues or create a new one by following this guide: Reporting Issues","title":"Common Errors"},{"location":"support/common_errors/#no_speech_output","text":"","title":"No Speech Output"},{"location":"support/common_errors/#status_code_400401","text":"","title":"Status Code 400/401"},{"location":"support/common_errors/#step_1","text":"Log into the https://dashboard.heroku.com website and click on your echo-speaks-xxxxxxx app.","title":"Step 1:"},{"location":"support/common_errors/#step_2","text":"Then click on the Settings .","title":"Step 2:"},{"location":"support/common_errors/#step_3","text":"Scroll down to the Domains and Certificates section (pictured below).","title":"Step 3:"},{"location":"support/common_errors/#step_4","text":"Click on the link listed next to Domain . This will take you to the Amazon Cookie Retrieval page which looks similar to the picture below. If it shows \u2018Authentication Good` then you should then be good to go. If you are directed to log in again, then just do it and you should then be good.","title":"Step 4:"},{"location":"support/common_errors/#status_code_404_deprecated","text":"","title":"Status Code 404 (DEPRECATED)"},{"location":"support/common_errors/#step_5","text":"","title":"Step 1:"},{"location":"support/common_errors/#step_6","text":"","title":"Step 2:"},{"location":"support/common_errors/#step_7","text":"","title":"Step 3:"},{"location":"support/common_errors/#step_8","text":"","title":"Step 4:"},{"location":"support/common_errors/#apcvf_request_error","text":"","title":"/ap/cvf Request Error"},{"location":"support/common_errors/#didnt_see_your_issue_here","text":"","title":"Didn't See your Issue here?:"},{"location":"support/he_server_removal/","text":"Step 5: # Open the Echo Speaks SmartApp and click on the Login Status | Service Management . Step 6: # Tap on the Manage Login Service input at the bottom of the page. Step 7: # At the bottom, you will see the Reset Options tap to expand the section. Once expanded Toggle the Reset Service Data Step 8: # If the page doesn\u2019t refresh to look like below then go back one page and return. Now that you have deleted the Echo Speaks server and reset the service data from the app the removal process is complete. Want to Redeploy? # Server Configuration","title":"He server removal"},{"location":"support/he_server_removal/#step_5","text":"","title":"Step 5:"},{"location":"support/he_server_removal/#step_6","text":"","title":"Step 6:"},{"location":"support/he_server_removal/#step_7","text":"","title":"Step 7:"},{"location":"support/he_server_removal/#step_8","text":"","title":"Step 8:"},{"location":"support/he_server_removal/#want_to_redeploy","text":"","title":"Want to Redeploy?"},{"location":"support/reporting_issues/","text":"Issue Reporting # Please check the common errors section before opening a new issue. Common Errors You can submit a new or review any existing issues here: https://github.com/tonesto7/echo-speaks/issues Please provide as much details as possible. Logs/Screenshots would be great Was your Alexa Device Incorrectly Identified? # Please create a new issue here: https://github.com/tonesto7/echo-speaks/issues Provide the following info in the issue: DeviceType id (eg. A38949IHXHRQ5P) Model Name Description Generation of the device Project Board # View Project Issues and Priorities: GitKraken Glo Board","title":"Reporting Issues"},{"location":"support/reporting_issues/#issue_reporting","text":"","title":"Issue Reporting"},{"location":"support/reporting_issues/#was_your_alexa_device_incorrectly_identified","text":"","title":"Was your Alexa Device Incorrectly Identified?"},{"location":"support/reporting_issues/#project_board","text":"","title":"Project Board"},{"location":"support/server_removal/","text":"There may come a time when you need to reset your Heroku server service. Follow these steps precisely to do it. Step 1: # Logon to the dashboard.heroku.com site. You should see this screen that lists your Echo Speaks App, click on the app. Step 2: # Click on the Settings button like you see in the green box below: Step 3: # Scroll to the very bottom of the page and click on Delete App Step 4: # Copy and paste the name of the app into the block and click on Delete. Now close this screen and go back to your mobile app. Select your platform to continue the removal/reset process: SmartThings Hubitat","title":"Server Removal/Reset"},{"location":"support/server_removal/#step_1","text":"","title":"Step 1:"},{"location":"support/server_removal/#step_2","text":"","title":"Step 2:"},{"location":"support/server_removal/#step_3","text":"","title":"Step 3:"},{"location":"support/server_removal/#step_4","text":"","title":"Step 4:"},{"location":"support/st_server_removal/","text":"Step 5: # Open the Echo Speaks SmartApp and click on the Login Status | Service Management . Step 6: # Tap on the Manage Login Service input at the bottom of the page. Step 7: # At the bottom, you will see the Reset Options tap to expand the section. Once expanded Toggle the Reset Service Data Step 8: # If the page doesn\u2019t refresh to look like below then go back one page and return. Now that you have deleted the Echo Speaks server and reset the service data from the app the removal process is complete. Want to Redeploy? # Server Configuration","title":"St server removal"},{"location":"support/st_server_removal/#step_5","text":"","title":"Step 5:"},{"location":"support/st_server_removal/#step_6","text":"","title":"Step 6:"},{"location":"support/st_server_removal/#step_7","text":"","title":"Step 7:"},{"location":"support/st_server_removal/#step_8","text":"","title":"Step 8:"},{"location":"support/st_server_removal/#want_to_redeploy","text":"","title":"Want to Redeploy?"},{"location":"updates/server_update/","text":"Step 1: # In order to update your existing server it will actually need to be deleted from Heroku and reployed. This process is very simple just follow the redeploy process to get started. Server Redeploy","title":"Server"},{"location":"updates/server_update/#step_1","text":"","title":"Step 1:"},{"location":"updates/hubitat/app_update/","text":"Step 1: # Proceed to your Hubitat Dashboard Step 2: # Navigate to the Apps Code Section of the by clicking on Apps Code tab at the left of your screen: Step 3: # Open the existing App code by clicking on the Echo Speaks app in the list of Apps. Step 4: # Click on the Import button at the top of the page: Copy this URL into the window: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/smartapps/tonesto7/echo-speaks.src/echo-speaks.groovy Click Import Click Save Step 5: # Repeat Steps 3 & 4 for the Echo Speaks Actions App: Action Child App Code Repeat Steps 3 & 4 for the Echo Speaks Zones App: Action Child App Code Step 6: # You\u2019re done!!!","title":"App"},{"location":"updates/hubitat/app_update/#step_1","text":"","title":"Step 1:"},{"location":"updates/hubitat/app_update/#step_2","text":"","title":"Step 2:"},{"location":"updates/hubitat/app_update/#step_3","text":"","title":"Step 3:"},{"location":"updates/hubitat/app_update/#step_4","text":"","title":"Step 4:"},{"location":"updates/hubitat/app_update/#step_5","text":"","title":"Step 5:"},{"location":"updates/hubitat/app_update/#step_6","text":"","title":"Step 6:"},{"location":"updates/hubitat/device_update/","text":"Step 1: # Navigate to the Driver Code Section of the by clicking on Driver Code tab at the left of your screen: Step 2: # Open the existing Driver code by clicking on the Echo Speaks - Device driver in the list of Drivers. Step 3: # Click on the Import button at the top of the page: Copy this URL into the window: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/drivers/echo-speaks-device.groovy Click Import Click Save Step 4: # Repeat Steps 1-3 with the Web Socket Device: https://raw.githubusercontent.com/tonesto7/echo-speaks/master/drivers/echo-speaks-ws.groovy Step 5: # You\u2019re done!!!","title":"Device"},{"location":"updates/hubitat/device_update/#step_1","text":"","title":"Step 1:"},{"location":"updates/hubitat/device_update/#step_2","text":"","title":"Step 2:"},{"location":"updates/hubitat/device_update/#step_3","text":"","title":"Step 3:"},{"location":"updates/hubitat/device_update/#step_4","text":"","title":"Step 4:"},{"location":"updates/hubitat/device_update/#step_5","text":"","title":"Step 5:"},{"location":"updates/smartthings/app_update/","text":"When you see the app listed and it\u2019s colored purple/red that means there may be a code update Step 1: # Click the My SmartApps button at the top of the IDE Step 2: # Click the Update from Repo button at the upper-right corner of the IDE Step 3: # Click on echo-speaks (master) from the drop down menu. It you see the echo-speaks.groovy , echo-speaks-actions.groovy , or echo-speaks-zones.groovy listed in either the left-hand column labeled Obsolete (updated in GitHub) or the middle column labeled Conflicted (updated locally and in GitHub) , scroll down to click the apps to update. Step 4: # Check the Publish box and Click the Execute Update in the bottom-right corner of the screen. When it\u2019s completed syncing, the updated app should now appear black in the IDE. If they ever change color again, that indicates a new version is available. You\u2019re done!!!","title":"App"},{"location":"updates/smartthings/app_update/#step_1","text":"","title":"Step 1:"},{"location":"updates/smartthings/app_update/#step_2","text":"","title":"Step 2:"},{"location":"updates/smartthings/app_update/#step_3","text":"","title":"Step 3:"},{"location":"updates/smartthings/app_update/#step_4","text":"","title":"Step 4:"},{"location":"updates/smartthings/device_update/","text":"When you see the app listed and it\u2019s colored purple/red that means there may be a code update Step 1: # Click the My Device Handlers button at the top of the IDE Step 2: # Click the Update from Repo button at the upper-right corner of the IDE Step 3: # Click on echo-speaks (master) from the drop down menu. It you see the echo-speaks-device.groovy listed in either the left-hand column labeled Obsolete (updated in GitHub) or the middle column labeled Conflicted (updated locally and in GitHub) , scroll down to click the device to update. Check the Publish box and Click the Execute Update in the bottom-right corner of the screen. When it\u2019s completed syncing, the updated device should now appear black in the IDE. If they ever change color again, that indicates a new version is available. Step 4: # You\u2019re done!!!","title":"Device"},{"location":"updates/smartthings/device_update/#step_1","text":"","title":"Step 1:"},{"location":"updates/smartthings/device_update/#step_2","text":"","title":"Step 2:"},{"location":"updates/smartthings/device_update/#step_3","text":"","title":"Step 3:"},{"location":"updates/smartthings/device_update/#step_4","text":"","title":"Step 4:"}]}